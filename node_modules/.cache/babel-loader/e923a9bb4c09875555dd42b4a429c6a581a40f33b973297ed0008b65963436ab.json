{"ast":null,"code":"import _objectSpread from \"/Users/devenspear/CascadeProjects/Paratox1.0/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\n// src/error.ts\nfunction isUnauthorizedError(e) {\n  var _e$errors;\n  const status = e === null || e === void 0 ? void 0 : e.status;\n  const code = e === null || e === void 0 || (_e$errors = e.errors) === null || _e$errors === void 0 || (_e$errors = _e$errors[0]) === null || _e$errors === void 0 ? void 0 : _e$errors.code;\n  return code === \"authentication_invalid\" && status === 401;\n}\nfunction isCaptchaError(e) {\n  return [\"captcha_invalid\", \"captcha_not_enabled\", \"captcha_missing_token\"].includes(e.errors[0].code);\n}\nfunction is4xxError(e) {\n  const status = e === null || e === void 0 ? void 0 : e.status;\n  return !!status && status >= 400 && status < 500;\n}\nfunction isNetworkError(e) {\n  const message = (\"\".concat(e.message).concat(e.name) || \"\").toLowerCase().replace(/\\s+/g, \"\");\n  return message.includes(\"networkerror\");\n}\nfunction isKnownError(error) {\n  return isClerkAPIResponseError(error) || isMetamaskError(error) || isClerkRuntimeError(error);\n}\nfunction isClerkAPIResponseError(err) {\n  return \"clerkError\" in err;\n}\nfunction isClerkRuntimeError(err) {\n  return \"clerkRuntimeError\" in err;\n}\nfunction isReverificationCancelledError(err) {\n  return isClerkRuntimeError(err) && err.code === \"reverification_cancelled\";\n}\nfunction isMetamaskError(err) {\n  return \"code\" in err && [4001, 32602, 32603].includes(err.code) && \"message\" in err;\n}\nfunction isUserLockedError(err) {\n  var _err$errors;\n  return isClerkAPIResponseError(err) && ((_err$errors = err.errors) === null || _err$errors === void 0 || (_err$errors = _err$errors[0]) === null || _err$errors === void 0 ? void 0 : _err$errors.code) === \"user_locked\";\n}\nfunction isPasswordPwnedError(err) {\n  var _err$errors2;\n  return isClerkAPIResponseError(err) && ((_err$errors2 = err.errors) === null || _err$errors2 === void 0 || (_err$errors2 = _err$errors2[0]) === null || _err$errors2 === void 0 ? void 0 : _err$errors2.code) === \"form_password_pwned\";\n}\nfunction parseErrors() {\n  let data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  return data.length > 0 ? data.map(parseError) : [];\n}\nfunction parseError(error) {\n  var _error$meta, _error$meta2, _error$meta3, _error$meta4, _error$meta5, _error$meta6;\n  return {\n    code: error.code,\n    message: error.message,\n    longMessage: error.long_message,\n    meta: {\n      paramName: error === null || error === void 0 || (_error$meta = error.meta) === null || _error$meta === void 0 ? void 0 : _error$meta.param_name,\n      sessionId: error === null || error === void 0 || (_error$meta2 = error.meta) === null || _error$meta2 === void 0 ? void 0 : _error$meta2.session_id,\n      emailAddresses: error === null || error === void 0 || (_error$meta3 = error.meta) === null || _error$meta3 === void 0 ? void 0 : _error$meta3.email_addresses,\n      identifiers: error === null || error === void 0 || (_error$meta4 = error.meta) === null || _error$meta4 === void 0 ? void 0 : _error$meta4.identifiers,\n      zxcvbn: error === null || error === void 0 || (_error$meta5 = error.meta) === null || _error$meta5 === void 0 ? void 0 : _error$meta5.zxcvbn,\n      plan: error === null || error === void 0 || (_error$meta6 = error.meta) === null || _error$meta6 === void 0 ? void 0 : _error$meta6.plan\n    }\n  };\n}\nfunction errorToJSON(error) {\n  var _error$meta7, _error$meta8, _error$meta9, _error$meta0, _error$meta1, _error$meta10;\n  return {\n    code: (error === null || error === void 0 ? void 0 : error.code) || \"\",\n    message: (error === null || error === void 0 ? void 0 : error.message) || \"\",\n    long_message: error === null || error === void 0 ? void 0 : error.longMessage,\n    meta: {\n      param_name: error === null || error === void 0 || (_error$meta7 = error.meta) === null || _error$meta7 === void 0 ? void 0 : _error$meta7.paramName,\n      session_id: error === null || error === void 0 || (_error$meta8 = error.meta) === null || _error$meta8 === void 0 ? void 0 : _error$meta8.sessionId,\n      email_addresses: error === null || error === void 0 || (_error$meta9 = error.meta) === null || _error$meta9 === void 0 ? void 0 : _error$meta9.emailAddresses,\n      identifiers: error === null || error === void 0 || (_error$meta0 = error.meta) === null || _error$meta0 === void 0 ? void 0 : _error$meta0.identifiers,\n      zxcvbn: error === null || error === void 0 || (_error$meta1 = error.meta) === null || _error$meta1 === void 0 ? void 0 : _error$meta1.zxcvbn,\n      plan: error === null || error === void 0 || (_error$meta10 = error.meta) === null || _error$meta10 === void 0 ? void 0 : _error$meta10.plan\n    }\n  };\n}\nvar ClerkAPIResponseError = class _ClerkAPIResponseError extends Error {\n  constructor(message, _ref) {\n    let {\n      data,\n      status,\n      clerkTraceId,\n      retryAfter\n    } = _ref;\n    super(message);\n    this.toString = () => {\n      let message = \"[\".concat(this.name, \"]\\nMessage:\").concat(this.message, \"\\nStatus:\").concat(this.status, \"\\nSerialized errors: \").concat(this.errors.map(e => JSON.stringify(e)));\n      if (this.clerkTraceId) {\n        message += \"\\nClerk Trace ID: \".concat(this.clerkTraceId);\n      }\n      return message;\n    };\n    Object.setPrototypeOf(this, _ClerkAPIResponseError.prototype);\n    this.status = status;\n    this.message = message;\n    this.clerkTraceId = clerkTraceId;\n    this.retryAfter = retryAfter;\n    this.clerkError = true;\n    this.errors = parseErrors(data);\n  }\n};\nvar ClerkRuntimeError = class _ClerkRuntimeError extends Error {\n  constructor(message, _ref2) {\n    let {\n      code\n    } = _ref2;\n    const prefix = \"\\u{1F512} Clerk:\";\n    const regex = new RegExp(prefix.replace(\" \", \"\\\\s*\"), \"i\");\n    const sanitized = message.replace(regex, \"\");\n    const _message = \"\".concat(prefix, \" \").concat(sanitized.trim(), \"\\n\\n(code=\\\"\").concat(code, \"\\\")\\n\");\n    super(_message);\n    /**\n     * Returns a string representation of the error.\n     *\n     * @returns {string} A formatted string with the error name and message.\n     */\n    this.toString = () => {\n      return \"[\".concat(this.name, \"]\\nMessage:\").concat(this.message);\n    };\n    Object.setPrototypeOf(this, _ClerkRuntimeError.prototype);\n    this.code = code;\n    this.message = _message;\n    this.clerkRuntimeError = true;\n    this.name = \"ClerkRuntimeError\";\n  }\n};\nvar EmailLinkError = class _EmailLinkError extends Error {\n  constructor(code) {\n    super(code);\n    this.code = code;\n    this.name = \"EmailLinkError\";\n    Object.setPrototypeOf(this, _EmailLinkError.prototype);\n  }\n};\nfunction isEmailLinkError(err) {\n  return err.name === \"EmailLinkError\";\n}\nvar EmailLinkErrorCode = {\n  Expired: \"expired\",\n  Failed: \"failed\",\n  ClientMismatch: \"client_mismatch\"\n};\nvar EmailLinkErrorCodeStatus = {\n  Expired: \"expired\",\n  Failed: \"failed\",\n  ClientMismatch: \"client_mismatch\"\n};\nvar DefaultMessages = Object.freeze({\n  InvalidProxyUrlErrorMessage: \"The proxyUrl passed to Clerk is invalid. The expected value for proxyUrl is an absolute URL or a relative path with a leading '/'. (key={{url}})\",\n  InvalidPublishableKeyErrorMessage: \"The publishableKey passed to Clerk is invalid. You can get your Publishable key at https://dashboard.clerk.com/last-active?path=api-keys. (key={{key}})\",\n  MissingPublishableKeyErrorMessage: \"Missing publishableKey. You can get your key at https://dashboard.clerk.com/last-active?path=api-keys.\",\n  MissingSecretKeyErrorMessage: \"Missing secretKey. You can get your key at https://dashboard.clerk.com/last-active?path=api-keys.\",\n  MissingClerkProvider: \"{{source}} can only be used within the <ClerkProvider /> component. Learn more: https://clerk.com/docs/components/clerk-provider\"\n});\nfunction buildErrorThrower(_ref3) {\n  let {\n    packageName,\n    customMessages\n  } = _ref3;\n  let pkg = packageName;\n  const messages = _objectSpread(_objectSpread({}, DefaultMessages), customMessages);\n  function buildMessage(rawMessage, replacements) {\n    if (!replacements) {\n      return \"\".concat(pkg, \": \").concat(rawMessage);\n    }\n    let msg = rawMessage;\n    const matches = rawMessage.matchAll(/{{([a-zA-Z0-9-_]+)}}/g);\n    for (const match of matches) {\n      const replacement = (replacements[match[1]] || \"\").toString();\n      msg = msg.replace(\"{{\".concat(match[1], \"}}\"), replacement);\n    }\n    return \"\".concat(pkg, \": \").concat(msg);\n  }\n  return {\n    setPackageName(_ref4) {\n      let {\n        packageName: packageName2\n      } = _ref4;\n      if (typeof packageName2 === \"string\") {\n        pkg = packageName2;\n      }\n      return this;\n    },\n    setMessages(_ref5) {\n      let {\n        customMessages: customMessages2\n      } = _ref5;\n      Object.assign(messages, customMessages2 || {});\n      return this;\n    },\n    throwInvalidPublishableKeyError(params) {\n      throw new Error(buildMessage(messages.InvalidPublishableKeyErrorMessage, params));\n    },\n    throwInvalidProxyUrl(params) {\n      throw new Error(buildMessage(messages.InvalidProxyUrlErrorMessage, params));\n    },\n    throwMissingPublishableKeyError() {\n      throw new Error(buildMessage(messages.MissingPublishableKeyErrorMessage));\n    },\n    throwMissingSecretKeyError() {\n      throw new Error(buildMessage(messages.MissingSecretKeyErrorMessage));\n    },\n    throwMissingClerkProviderError(params) {\n      throw new Error(buildMessage(messages.MissingClerkProvider, params));\n    },\n    throw(message) {\n      throw new Error(buildMessage(message));\n    }\n  };\n}\nvar ClerkWebAuthnError = class extends ClerkRuntimeError {\n  constructor(message, _ref6) {\n    let {\n      code\n    } = _ref6;\n    super(message, {\n      code\n    });\n    this.code = code;\n  }\n};\nexport { isUnauthorizedError, isCaptchaError, is4xxError, isNetworkError, isKnownError, isClerkAPIResponseError, isClerkRuntimeError, isReverificationCancelledError, isMetamaskError, isUserLockedError, isPasswordPwnedError, parseErrors, parseError, errorToJSON, ClerkAPIResponseError, ClerkRuntimeError, EmailLinkError, isEmailLinkError, EmailLinkErrorCode, EmailLinkErrorCodeStatus, buildErrorThrower, ClerkWebAuthnError };","map":{"version":3,"names":["isUnauthorizedError","e","_e$errors","status","code","errors","isCaptchaError","includes","is4xxError","isNetworkError","message","concat","name","toLowerCase","replace","isKnownError","error","isClerkAPIResponseError","isMetamaskError","isClerkRuntimeError","err","isReverificationCancelledError","isUserLockedError","_err$errors","isPasswordPwnedError","_err$errors2","parseErrors","data","arguments","length","undefined","map","parseError","_error$meta","_error$meta2","_error$meta3","_error$meta4","_error$meta5","_error$meta6","longMessage","long_message","meta","paramName","param_name","sessionId","session_id","emailAddresses","email_addresses","identifiers","zxcvbn","plan","errorToJSON","_error$meta7","_error$meta8","_error$meta9","_error$meta0","_error$meta1","_error$meta10","ClerkAPIResponseError","_ClerkAPIResponseError","Error","constructor","_ref","clerkTraceId","retryAfter","toString","JSON","stringify","Object","setPrototypeOf","prototype","clerkError","ClerkRuntimeError","_ClerkRuntimeError","_ref2","prefix","regex","RegExp","sanitized","_message","trim","clerkRuntimeError","EmailLinkError","_EmailLinkError","isEmailLinkError","EmailLinkErrorCode","Expired","Failed","ClientMismatch","EmailLinkErrorCodeStatus","DefaultMessages","freeze","InvalidProxyUrlErrorMessage","InvalidPublishableKeyErrorMessage","MissingPublishableKeyErrorMessage","MissingSecretKeyErrorMessage","MissingClerkProvider","buildErrorThrower","_ref3","packageName","customMessages","pkg","messages","_objectSpread","buildMessage","rawMessage","replacements","msg","matches","matchAll","match","replacement","setPackageName","_ref4","packageName2","setMessages","_ref5","customMessages2","assign","throwInvalidPublishableKeyError","params","throwInvalidProxyUrl","throwMissingPublishableKeyError","throwMissingSecretKeyError","throwMissingClerkProviderError","throw","ClerkWebAuthnError","_ref6"],"sources":["/Users/devenspear/CascadeProjects/Paratox1.0/node_modules/@clerk/shared/src/error.ts"],"sourcesContent":["import type { ClerkAPIError, ClerkAPIErrorJSON } from '@clerk/types';\n\nexport function isUnauthorizedError(e: any): boolean {\n  const status = e?.status;\n  const code = e?.errors?.[0]?.code;\n  return code === 'authentication_invalid' && status === 401;\n}\n\nexport function isCaptchaError(e: ClerkAPIResponseError): boolean {\n  return ['captcha_invalid', 'captcha_not_enabled', 'captcha_missing_token'].includes(e.errors[0].code);\n}\n\nexport function is4xxError(e: any): boolean {\n  const status = e?.status;\n  return !!status && status >= 400 && status < 500;\n}\n\nexport function isNetworkError(e: any): boolean {\n  // TODO: revise during error handling epic\n  const message = (`${e.message}${e.name}` || '').toLowerCase().replace(/\\s+/g, '');\n  return message.includes('networkerror');\n}\n\ninterface ClerkAPIResponseOptions {\n  data: ClerkAPIErrorJSON[];\n  status: number;\n  clerkTraceId?: string;\n  retryAfter?: number;\n}\n\n// For a comprehensive Metamask error list, please see\n// https://docs.metamask.io/guide/ethereum-provider.html#errors\nexport interface MetamaskError extends Error {\n  code: 4001 | 32602 | 32603;\n  message: string;\n  data?: unknown;\n}\n\nexport function isKnownError(error: any): error is ClerkAPIResponseError | ClerkRuntimeError | MetamaskError {\n  return isClerkAPIResponseError(error) || isMetamaskError(error) || isClerkRuntimeError(error);\n}\n\nexport function isClerkAPIResponseError(err: any): err is ClerkAPIResponseError {\n  return 'clerkError' in err;\n}\n\n/**\n * Checks if the provided error object is an instance of ClerkRuntimeError.\n *\n * @param {any} err - The error object to check.\n * @returns {boolean} True if the error is a ClerkRuntimeError, false otherwise.\n *\n * @example\n * const error = new ClerkRuntimeError('An error occurred');\n * if (isClerkRuntimeError(error)) {\n *   // Handle ClerkRuntimeError\n *   console.error('ClerkRuntimeError:', error.message);\n * } else {\n *   // Handle other errors\n *   console.error('Other error:', error.message);\n * }\n */\nexport function isClerkRuntimeError(err: any): err is ClerkRuntimeError {\n  return 'clerkRuntimeError' in err;\n}\n\nexport function isReverificationCancelledError(err: any) {\n  return isClerkRuntimeError(err) && err.code === 'reverification_cancelled';\n}\n\nexport function isMetamaskError(err: any): err is MetamaskError {\n  return 'code' in err && [4001, 32602, 32603].includes(err.code) && 'message' in err;\n}\n\nexport function isUserLockedError(err: any) {\n  return isClerkAPIResponseError(err) && err.errors?.[0]?.code === 'user_locked';\n}\n\nexport function isPasswordPwnedError(err: any) {\n  return isClerkAPIResponseError(err) && err.errors?.[0]?.code === 'form_password_pwned';\n}\n\nexport function parseErrors(data: ClerkAPIErrorJSON[] = []): ClerkAPIError[] {\n  return data.length > 0 ? data.map(parseError) : [];\n}\n\nexport function parseError(error: ClerkAPIErrorJSON): ClerkAPIError {\n  return {\n    code: error.code,\n    message: error.message,\n    longMessage: error.long_message,\n    meta: {\n      paramName: error?.meta?.param_name,\n      sessionId: error?.meta?.session_id,\n      emailAddresses: error?.meta?.email_addresses,\n      identifiers: error?.meta?.identifiers,\n      zxcvbn: error?.meta?.zxcvbn,\n      plan: error?.meta?.plan,\n    },\n  };\n}\n\nexport function errorToJSON(error: ClerkAPIError | null): ClerkAPIErrorJSON {\n  return {\n    code: error?.code || '',\n    message: error?.message || '',\n    long_message: error?.longMessage,\n    meta: {\n      param_name: error?.meta?.paramName,\n      session_id: error?.meta?.sessionId,\n      email_addresses: error?.meta?.emailAddresses,\n      identifiers: error?.meta?.identifiers,\n      zxcvbn: error?.meta?.zxcvbn,\n      plan: error?.meta?.plan,\n    },\n  };\n}\n\nexport class ClerkAPIResponseError extends Error {\n  clerkError: true;\n\n  status: number;\n  message: string;\n  clerkTraceId?: string;\n  retryAfter?: number;\n\n  errors: ClerkAPIError[];\n\n  constructor(message: string, { data, status, clerkTraceId, retryAfter }: ClerkAPIResponseOptions) {\n    super(message);\n\n    Object.setPrototypeOf(this, ClerkAPIResponseError.prototype);\n\n    this.status = status;\n    this.message = message;\n    this.clerkTraceId = clerkTraceId;\n    this.retryAfter = retryAfter;\n    this.clerkError = true;\n    this.errors = parseErrors(data);\n  }\n\n  public toString = () => {\n    let message = `[${this.name}]\\nMessage:${this.message}\\nStatus:${this.status}\\nSerialized errors: ${this.errors.map(\n      e => JSON.stringify(e),\n    )}`;\n\n    if (this.clerkTraceId) {\n      message += `\\nClerk Trace ID: ${this.clerkTraceId}`;\n    }\n\n    return message;\n  };\n}\n\n/**\n * Custom error class for representing Clerk runtime errors.\n *\n * @class ClerkRuntimeError\n * @example\n *   throw new ClerkRuntimeError('An error occurred', { code: 'password_invalid' });\n */\nexport class ClerkRuntimeError extends Error {\n  clerkRuntimeError: true;\n\n  /**\n   * The error message.\n   *\n   * @type {string}\n   */\n  message: string;\n\n  /**\n   * A unique code identifying the error, can be used for localization.\n   *\n   * @type {string}\n   */\n  code: string;\n\n  constructor(message: string, { code }: { code: string }) {\n    const prefix = '🔒 Clerk:';\n    const regex = new RegExp(prefix.replace(' ', '\\\\s*'), 'i');\n    const sanitized = message.replace(regex, '');\n    const _message = `${prefix} ${sanitized.trim()}\\n\\n(code=\"${code}\")\\n`;\n    super(_message);\n\n    Object.setPrototypeOf(this, ClerkRuntimeError.prototype);\n\n    this.code = code;\n    this.message = _message;\n    this.clerkRuntimeError = true;\n    this.name = 'ClerkRuntimeError';\n  }\n\n  /**\n   * Returns a string representation of the error.\n   *\n   * @returns {string} A formatted string with the error name and message.\n   */\n  public toString = () => {\n    return `[${this.name}]\\nMessage:${this.message}`;\n  };\n}\n\nexport class EmailLinkError extends Error {\n  code: string;\n\n  constructor(code: string) {\n    super(code);\n    this.code = code;\n    this.name = 'EmailLinkError' as const;\n    Object.setPrototypeOf(this, EmailLinkError.prototype);\n  }\n}\n\nexport function isEmailLinkError(err: Error): err is EmailLinkError {\n  return err.name === 'EmailLinkError';\n}\n\n/**\n * @deprecated Use `EmailLinkErrorCodeStatus` instead.\n *\n * @hidden\n */\nexport const EmailLinkErrorCode = {\n  Expired: 'expired',\n  Failed: 'failed',\n  ClientMismatch: 'client_mismatch',\n};\n\nexport const EmailLinkErrorCodeStatus = {\n  Expired: 'expired',\n  Failed: 'failed',\n  ClientMismatch: 'client_mismatch',\n} as const;\n\nconst DefaultMessages = Object.freeze({\n  InvalidProxyUrlErrorMessage: `The proxyUrl passed to Clerk is invalid. The expected value for proxyUrl is an absolute URL or a relative path with a leading '/'. (key={{url}})`,\n  InvalidPublishableKeyErrorMessage: `The publishableKey passed to Clerk is invalid. You can get your Publishable key at https://dashboard.clerk.com/last-active?path=api-keys. (key={{key}})`,\n  MissingPublishableKeyErrorMessage: `Missing publishableKey. You can get your key at https://dashboard.clerk.com/last-active?path=api-keys.`,\n  MissingSecretKeyErrorMessage: `Missing secretKey. You can get your key at https://dashboard.clerk.com/last-active?path=api-keys.`,\n  MissingClerkProvider: `{{source}} can only be used within the <ClerkProvider /> component. Learn more: https://clerk.com/docs/components/clerk-provider`,\n});\n\ntype MessageKeys = keyof typeof DefaultMessages;\n\ntype Messages = Record<MessageKeys, string>;\n\ntype CustomMessages = Partial<Messages>;\n\nexport type ErrorThrowerOptions = {\n  packageName: string;\n  customMessages?: CustomMessages;\n};\n\nexport interface ErrorThrower {\n  setPackageName(options: ErrorThrowerOptions): ErrorThrower;\n\n  setMessages(options: ErrorThrowerOptions): ErrorThrower;\n\n  throwInvalidPublishableKeyError(params: { key?: string }): never;\n\n  throwInvalidProxyUrl(params: { url?: string }): never;\n\n  throwMissingPublishableKeyError(): never;\n\n  throwMissingSecretKeyError(): never;\n\n  throwMissingClerkProviderError(params: { source?: string }): never;\n\n  throw(message: string): never;\n}\n\nexport function buildErrorThrower({ packageName, customMessages }: ErrorThrowerOptions): ErrorThrower {\n  let pkg = packageName;\n\n  const messages = {\n    ...DefaultMessages,\n    ...customMessages,\n  };\n\n  function buildMessage(rawMessage: string, replacements?: Record<string, string | number>) {\n    if (!replacements) {\n      return `${pkg}: ${rawMessage}`;\n    }\n\n    let msg = rawMessage;\n    const matches = rawMessage.matchAll(/{{([a-zA-Z0-9-_]+)}}/g);\n\n    for (const match of matches) {\n      const replacement = (replacements[match[1]] || '').toString();\n      msg = msg.replace(`{{${match[1]}}}`, replacement);\n    }\n\n    return `${pkg}: ${msg}`;\n  }\n\n  return {\n    setPackageName({ packageName }: ErrorThrowerOptions): ErrorThrower {\n      if (typeof packageName === 'string') {\n        pkg = packageName;\n      }\n      return this;\n    },\n\n    setMessages({ customMessages }: ErrorThrowerOptions): ErrorThrower {\n      Object.assign(messages, customMessages || {});\n      return this;\n    },\n\n    throwInvalidPublishableKeyError(params: { key?: string }): never {\n      throw new Error(buildMessage(messages.InvalidPublishableKeyErrorMessage, params));\n    },\n\n    throwInvalidProxyUrl(params: { url?: string }): never {\n      throw new Error(buildMessage(messages.InvalidProxyUrlErrorMessage, params));\n    },\n\n    throwMissingPublishableKeyError(): never {\n      throw new Error(buildMessage(messages.MissingPublishableKeyErrorMessage));\n    },\n\n    throwMissingSecretKeyError(): never {\n      throw new Error(buildMessage(messages.MissingSecretKeyErrorMessage));\n    },\n\n    throwMissingClerkProviderError(params: { source?: string }): never {\n      throw new Error(buildMessage(messages.MissingClerkProvider, params));\n    },\n\n    throw(message: string): never {\n      throw new Error(buildMessage(message));\n    },\n  };\n}\n\ntype ClerkWebAuthnErrorCode =\n  // Generic\n  | 'passkey_not_supported'\n  | 'passkey_pa_not_supported'\n  | 'passkey_invalid_rpID_or_domain'\n  | 'passkey_already_exists'\n  | 'passkey_operation_aborted'\n  // Retrieval\n  | 'passkey_retrieval_cancelled'\n  | 'passkey_retrieval_failed'\n  // Registration\n  | 'passkey_registration_cancelled'\n  | 'passkey_registration_failed';\n\nexport class ClerkWebAuthnError extends ClerkRuntimeError {\n  /**\n   * A unique code identifying the error, can be used for localization.\n   */\n  code: ClerkWebAuthnErrorCode;\n\n  constructor(message: string, { code }: { code: ClerkWebAuthnErrorCode }) {\n    super(message, { code });\n    this.code = code;\n  }\n}\n"],"mappings":";;AAEO,SAASA,oBAAoBC,CAAA,EAAiB;EAAA,IAAAC,SAAA;EACnD,MAAMC,MAAA,GAASF,CAAA,aAAAA,CAAA,uBAAAA,CAAA,CAAGE,MAAA;EAClB,MAAMC,IAAA,GAAOH,CAAA,aAAAA,CAAA,gBAAAC,SAAA,GAAAD,CAAA,CAAGI,MAAA,cAAAH,SAAA,gBAAAA,SAAA,GAAHA,SAAA,CAAY,CAAC,eAAAA,SAAA,uBAAbA,SAAA,CAAgBE,IAAA;EAC7B,OAAOA,IAAA,KAAS,4BAA4BD,MAAA,KAAW;AACzD;AAEO,SAASG,eAAeL,CAAA,EAAmC;EAChE,OAAO,CAAC,mBAAmB,uBAAuB,uBAAuB,EAAEM,QAAA,CAASN,CAAA,CAAEI,MAAA,CAAO,CAAC,EAAED,IAAI;AACtG;AAEO,SAASI,WAAWP,CAAA,EAAiB;EAC1C,MAAME,MAAA,GAASF,CAAA,aAAAA,CAAA,uBAAAA,CAAA,CAAGE,MAAA;EAClB,OAAO,CAAC,CAACA,MAAA,IAAUA,MAAA,IAAU,OAAOA,MAAA,GAAS;AAC/C;AAEO,SAASM,eAAeR,CAAA,EAAiB;EAE9C,MAAMS,OAAA,IAAW,GAAAC,MAAA,CAAGV,CAAA,CAAES,OAAO,EAAAC,MAAA,CAAGV,CAAA,CAAEW,IAAI,KAAM,IAAIC,WAAA,CAAY,EAAEC,OAAA,CAAQ,QAAQ,EAAE;EAChF,OAAOJ,OAAA,CAAQH,QAAA,CAAS,cAAc;AACxC;AAiBO,SAASQ,aAAaC,KAAA,EAAgF;EAC3G,OAAOC,uBAAA,CAAwBD,KAAK,KAAKE,eAAA,CAAgBF,KAAK,KAAKG,mBAAA,CAAoBH,KAAK;AAC9F;AAEO,SAASC,wBAAwBG,GAAA,EAAwC;EAC9E,OAAO,gBAAgBA,GAAA;AACzB;AAkBO,SAASD,oBAAoBC,GAAA,EAAoC;EACtE,OAAO,uBAAuBA,GAAA;AAChC;AAEO,SAASC,+BAA+BD,GAAA,EAAU;EACvD,OAAOD,mBAAA,CAAoBC,GAAG,KAAKA,GAAA,CAAIhB,IAAA,KAAS;AAClD;AAEO,SAASc,gBAAgBE,GAAA,EAAgC;EAC9D,OAAO,UAAUA,GAAA,IAAO,CAAC,MAAM,OAAO,KAAK,EAAEb,QAAA,CAASa,GAAA,CAAIhB,IAAI,KAAK,aAAagB,GAAA;AAClF;AAEO,SAASE,kBAAkBF,GAAA,EAAU;EAAA,IAAAG,WAAA;EAC1C,OAAON,uBAAA,CAAwBG,GAAG,KAAK,EAAAG,WAAA,GAAAH,GAAA,CAAIf,MAAA,cAAAkB,WAAA,gBAAAA,WAAA,GAAJA,WAAA,CAAa,CAAC,eAAAA,WAAA,uBAAdA,WAAA,CAAiBnB,IAAA,MAAS;AACnE;AAEO,SAASoB,qBAAqBJ,GAAA,EAAU;EAAA,IAAAK,YAAA;EAC7C,OAAOR,uBAAA,CAAwBG,GAAG,KAAK,EAAAK,YAAA,GAAAL,GAAA,CAAIf,MAAA,cAAAoB,YAAA,gBAAAA,YAAA,GAAJA,YAAA,CAAa,CAAC,eAAAA,YAAA,uBAAdA,YAAA,CAAiBrB,IAAA,MAAS;AACnE;AAEO,SAASsB,YAAA,EAA6D;EAAA,IAAjDC,IAAA,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAA4B,EAAC;EACvD,OAAOD,IAAA,CAAKE,MAAA,GAAS,IAAIF,IAAA,CAAKI,GAAA,CAAIC,UAAU,IAAI,EAAC;AACnD;AAEO,SAASA,WAAWhB,KAAA,EAAyC;EAAA,IAAAiB,WAAA,EAAAC,YAAA,EAAAC,YAAA,EAAAC,YAAA,EAAAC,YAAA,EAAAC,YAAA;EAClE,OAAO;IACLlC,IAAA,EAAMY,KAAA,CAAMZ,IAAA;IACZM,OAAA,EAASM,KAAA,CAAMN,OAAA;IACf6B,WAAA,EAAavB,KAAA,CAAMwB,YAAA;IACnBC,IAAA,EAAM;MACJC,SAAA,EAAW1B,KAAA,aAAAA,KAAA,gBAAAiB,WAAA,GAAAjB,KAAA,CAAOyB,IAAA,cAAAR,WAAA,uBAAPA,WAAA,CAAaU,UAAA;MACxBC,SAAA,EAAW5B,KAAA,aAAAA,KAAA,gBAAAkB,YAAA,GAAAlB,KAAA,CAAOyB,IAAA,cAAAP,YAAA,uBAAPA,YAAA,CAAaW,UAAA;MACxBC,cAAA,EAAgB9B,KAAA,aAAAA,KAAA,gBAAAmB,YAAA,GAAAnB,KAAA,CAAOyB,IAAA,cAAAN,YAAA,uBAAPA,YAAA,CAAaY,eAAA;MAC7BC,WAAA,EAAahC,KAAA,aAAAA,KAAA,gBAAAoB,YAAA,GAAApB,KAAA,CAAOyB,IAAA,cAAAL,YAAA,uBAAPA,YAAA,CAAaY,WAAA;MAC1BC,MAAA,EAAQjC,KAAA,aAAAA,KAAA,gBAAAqB,YAAA,GAAArB,KAAA,CAAOyB,IAAA,cAAAJ,YAAA,uBAAPA,YAAA,CAAaY,MAAA;MACrBC,IAAA,EAAMlC,KAAA,aAAAA,KAAA,gBAAAsB,YAAA,GAAAtB,KAAA,CAAOyB,IAAA,cAAAH,YAAA,uBAAPA,YAAA,CAAaY;IACrB;EACF;AACF;AAEO,SAASC,YAAYnC,KAAA,EAAgD;EAAA,IAAAoC,YAAA,EAAAC,YAAA,EAAAC,YAAA,EAAAC,YAAA,EAAAC,YAAA,EAAAC,aAAA;EAC1E,OAAO;IACLrD,IAAA,EAAM,CAAAY,KAAA,aAAAA,KAAA,uBAAAA,KAAA,CAAOZ,IAAA,KAAQ;IACrBM,OAAA,EAAS,CAAAM,KAAA,aAAAA,KAAA,uBAAAA,KAAA,CAAON,OAAA,KAAW;IAC3B8B,YAAA,EAAcxB,KAAA,aAAAA,KAAA,uBAAAA,KAAA,CAAOuB,WAAA;IACrBE,IAAA,EAAM;MACJE,UAAA,EAAY3B,KAAA,aAAAA,KAAA,gBAAAoC,YAAA,GAAApC,KAAA,CAAOyB,IAAA,cAAAW,YAAA,uBAAPA,YAAA,CAAaV,SAAA;MACzBG,UAAA,EAAY7B,KAAA,aAAAA,KAAA,gBAAAqC,YAAA,GAAArC,KAAA,CAAOyB,IAAA,cAAAY,YAAA,uBAAPA,YAAA,CAAaT,SAAA;MACzBG,eAAA,EAAiB/B,KAAA,aAAAA,KAAA,gBAAAsC,YAAA,GAAAtC,KAAA,CAAOyB,IAAA,cAAAa,YAAA,uBAAPA,YAAA,CAAaR,cAAA;MAC9BE,WAAA,EAAahC,KAAA,aAAAA,KAAA,gBAAAuC,YAAA,GAAAvC,KAAA,CAAOyB,IAAA,cAAAc,YAAA,uBAAPA,YAAA,CAAaP,WAAA;MAC1BC,MAAA,EAAQjC,KAAA,aAAAA,KAAA,gBAAAwC,YAAA,GAAAxC,KAAA,CAAOyB,IAAA,cAAAe,YAAA,uBAAPA,YAAA,CAAaP,MAAA;MACrBC,IAAA,EAAMlC,KAAA,aAAAA,KAAA,gBAAAyC,aAAA,GAAAzC,KAAA,CAAOyB,IAAA,cAAAgB,aAAA,uBAAPA,aAAA,CAAaP;IACrB;EACF;AACF;AAEO,IAAMQ,qBAAA,GAAN,MAAMC,sBAAA,SAA8BC,KAAA,CAAM;EAU/CC,YAAYnD,OAAA,EAAAoD,IAAA,EAAsF;IAAA,IAArE;MAAEnC,IAAA;MAAMxB,MAAA;MAAQ4D,YAAA;MAAcC;IAAW,IAAAF,IAAA;IACpE,MAAMpD,OAAO;IAYf,KAAOuD,QAAA,GAAW,MAAM;MACtB,IAAIvD,OAAA,OAAAC,MAAA,CAAc,KAAKC,IAAI,iBAAAD,MAAA,CAAc,KAAKD,OAAO,eAAAC,MAAA,CAAY,KAAKR,MAAM,2BAAAQ,MAAA,CAAwB,KAAKN,MAAA,CAAO0B,GAAA,CAC9G9B,CAAA,IAAKiE,IAAA,CAAKC,SAAA,CAAUlE,CAAC,CACvB,CAAC;MAED,IAAI,KAAK8D,YAAA,EAAc;QACrBrD,OAAA,yBAAAC,MAAA,CAAgC,KAAKoD,YAAY;MACnD;MAEA,OAAOrD,OAAA;IACT;IApBE0D,MAAA,CAAOC,cAAA,CAAe,MAAMV,sBAAA,CAAsBW,SAAS;IAE3D,KAAKnE,MAAA,GAASA,MAAA;IACd,KAAKO,OAAA,GAAUA,OAAA;IACf,KAAKqD,YAAA,GAAeA,YAAA;IACpB,KAAKC,UAAA,GAAaA,UAAA;IAClB,KAAKO,UAAA,GAAa;IAClB,KAAKlE,MAAA,GAASqB,WAAA,CAAYC,IAAI;EAChC;AAaF;AASO,IAAM6C,iBAAA,GAAN,MAAMC,kBAAA,SAA0Bb,KAAA,CAAM;EAiB3CC,YAAYnD,OAAA,EAAAgE,KAAA,EAA6C;IAAA,IAA5B;MAAEtE;IAAK,IAAAsE,KAAA;IAClC,MAAMC,MAAA,GAAS;IACf,MAAMC,KAAA,GAAQ,IAAIC,MAAA,CAAOF,MAAA,CAAO7D,OAAA,CAAQ,KAAK,MAAM,GAAG,GAAG;IACzD,MAAMgE,SAAA,GAAYpE,OAAA,CAAQI,OAAA,CAAQ8D,KAAA,EAAO,EAAE;IAC3C,MAAMG,QAAA,MAAApE,MAAA,CAAcgE,MAAM,OAAAhE,MAAA,CAAImE,SAAA,CAAUE,IAAA,CAAK,CAAC,kBAAArE,MAAA,CAAcP,IAAI;IAChE,MAAM2E,QAAQ;IAehB;AAAA;AAAA;AAAA;AAAA;IAAA,KAAOd,QAAA,GAAW,MAAM;MACtB,WAAAtD,MAAA,CAAW,KAAKC,IAAI,iBAAAD,MAAA,CAAc,KAAKD,OAAO;IAChD;IAfE0D,MAAA,CAAOC,cAAA,CAAe,MAAMI,kBAAA,CAAkBH,SAAS;IAEvD,KAAKlE,IAAA,GAAOA,IAAA;IACZ,KAAKM,OAAA,GAAUqE,QAAA;IACf,KAAKE,iBAAA,GAAoB;IACzB,KAAKrE,IAAA,GAAO;EACd;AAUF;AAEO,IAAMsE,cAAA,GAAN,MAAMC,eAAA,SAAuBvB,KAAA,CAAM;EAGxCC,YAAYzD,IAAA,EAAc;IACxB,MAAMA,IAAI;IACV,KAAKA,IAAA,GAAOA,IAAA;IACZ,KAAKQ,IAAA,GAAO;IACZwD,MAAA,CAAOC,cAAA,CAAe,MAAMc,eAAA,CAAeb,SAAS;EACtD;AACF;AAEO,SAASc,iBAAiBhE,GAAA,EAAmC;EAClE,OAAOA,GAAA,CAAIR,IAAA,KAAS;AACtB;AAOO,IAAMyE,kBAAA,GAAqB;EAChCC,OAAA,EAAS;EACTC,MAAA,EAAQ;EACRC,cAAA,EAAgB;AAClB;AAEO,IAAMC,wBAAA,GAA2B;EACtCH,OAAA,EAAS;EACTC,MAAA,EAAQ;EACRC,cAAA,EAAgB;AAClB;AAEA,IAAME,eAAA,GAAkBtB,MAAA,CAAOuB,MAAA,CAAO;EACpCC,2BAAA,oJAA6B;EAC7BC,iCAAA,2JAAmC;EACnCC,iCAAA,0GAAmC;EACnCC,4BAAA,qGAA8B;EAC9BC,oBAAA;AACF,CAAC;AA+BM,SAASC,kBAAAC,KAAA,EAAsF;EAAA,IAApE;IAAEC,WAAA;IAAaC;EAAe,IAAAF,KAAA;EAC9D,IAAIG,GAAA,GAAMF,WAAA;EAEV,MAAMG,QAAA,GAAAC,aAAA,CAAAA,aAAA,KACDb,eAAA,GACAU,cAAA,CACL;EAEA,SAASI,aAAaC,UAAA,EAAoBC,YAAA,EAAgD;IACxF,IAAI,CAACA,YAAA,EAAc;MACjB,UAAA/F,MAAA,CAAU0F,GAAG,QAAA1F,MAAA,CAAK8F,UAAU;IAC9B;IAEA,IAAIE,GAAA,GAAMF,UAAA;IACV,MAAMG,OAAA,GAAUH,UAAA,CAAWI,QAAA,CAAS,uBAAuB;IAE3D,WAAWC,KAAA,IAASF,OAAA,EAAS;MAC3B,MAAMG,WAAA,IAAeL,YAAA,CAAaI,KAAA,CAAM,CAAC,CAAC,KAAK,IAAI7C,QAAA,CAAS;MAC5D0C,GAAA,GAAMA,GAAA,CAAI7F,OAAA,MAAAH,MAAA,CAAamG,KAAA,CAAM,CAAC,CAAC,SAAMC,WAAW;IAClD;IAEA,UAAApG,MAAA,CAAU0F,GAAG,QAAA1F,MAAA,CAAKgG,GAAG;EACvB;EAEA,OAAO;IACLK,eAAAC,KAAA,EAAmE;MAAA,IAApD;QAAEd,WAAA,EAAAe;MAAY,IAAAD,KAAA;MAC3B,IAAI,OAAOC,YAAA,KAAgB,UAAU;QACnCb,GAAA,GAAMa,YAAA;MACR;MACA,OAAO;IACT;IAEAC,YAAAC,KAAA,EAAmE;MAAA,IAAvD;QAAEhB,cAAA,EAAAiB;MAAe,IAAAD,KAAA;MAC3BhD,MAAA,CAAOkD,MAAA,CAAOhB,QAAA,EAAUe,eAAA,IAAkB,CAAC,CAAC;MAC5C,OAAO;IACT;IAEAE,gCAAgCC,MAAA,EAAiC;MAC/D,MAAM,IAAI5D,KAAA,CAAM4C,YAAA,CAAaF,QAAA,CAAST,iCAAA,EAAmC2B,MAAM,CAAC;IAClF;IAEAC,qBAAqBD,MAAA,EAAiC;MACpD,MAAM,IAAI5D,KAAA,CAAM4C,YAAA,CAAaF,QAAA,CAASV,2BAAA,EAA6B4B,MAAM,CAAC;IAC5E;IAEAE,gCAAA,EAAyC;MACvC,MAAM,IAAI9D,KAAA,CAAM4C,YAAA,CAAaF,QAAA,CAASR,iCAAiC,CAAC;IAC1E;IAEA6B,2BAAA,EAAoC;MAClC,MAAM,IAAI/D,KAAA,CAAM4C,YAAA,CAAaF,QAAA,CAASP,4BAA4B,CAAC;IACrE;IAEA6B,+BAA+BJ,MAAA,EAAoC;MACjE,MAAM,IAAI5D,KAAA,CAAM4C,YAAA,CAAaF,QAAA,CAASN,oBAAA,EAAsBwB,MAAM,CAAC;IACrE;IAEAK,MAAMnH,OAAA,EAAwB;MAC5B,MAAM,IAAIkD,KAAA,CAAM4C,YAAA,CAAa9F,OAAO,CAAC;IACvC;EACF;AACF;AAgBO,IAAMoH,kBAAA,GAAN,cAAiCtD,iBAAA,CAAkB;EAMxDX,YAAYnD,OAAA,EAAAqH,KAAA,EAA6D;IAAA,IAA5C;MAAE3H;IAAK,IAAA2H,KAAA;IAClC,MAAMrH,OAAA,EAAS;MAAEN;IAAK,CAAC;IACvB,KAAKA,IAAA,GAAOA,IAAA;EACd;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}