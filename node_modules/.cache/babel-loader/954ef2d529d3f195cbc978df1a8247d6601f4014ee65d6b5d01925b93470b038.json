{"ast":null,"code":"// src/utils/runtimeEnvironment.ts\nvar isDevelopmentEnvironment = () => {\n  try {\n    return process.env.NODE_ENV === \"development\";\n  } catch (_unused) {}\n  return false;\n};\nvar isTestEnvironment = () => {\n  try {\n    return process.env.NODE_ENV === \"test\";\n  } catch (_unused2) {}\n  return false;\n};\nvar isProductionEnvironment = () => {\n  try {\n    return process.env.NODE_ENV === \"production\";\n  } catch (_unused3) {}\n  return false;\n};\nexport { isDevelopmentEnvironment, isTestEnvironment, isProductionEnvironment };","map":{"version":3,"names":["isDevelopmentEnvironment","process","env","NODE_ENV","_unused","isTestEnvironment","_unused2","isProductionEnvironment","_unused3"],"sources":["/Users/devenspear/CascadeProjects/HealthApps25/node_modules/@clerk/shared/src/utils/runtimeEnvironment.ts"],"sourcesContent":["export const isDevelopmentEnvironment = (): boolean => {\n  try {\n    return process.env.NODE_ENV === 'development';\n    // eslint-disable-next-line no-empty\n  } catch {}\n\n  // TODO: add support for import.meta.env.DEV that is being used by vite\n\n  return false;\n};\n\nexport const isTestEnvironment = (): boolean => {\n  try {\n    return process.env.NODE_ENV === 'test';\n    // eslint-disable-next-line no-empty\n  } catch {}\n\n  // TODO: add support for import.meta.env.DEV that is being used by vite\n  return false;\n};\n\nexport const isProductionEnvironment = (): boolean => {\n  try {\n    return process.env.NODE_ENV === 'production';\n    // eslint-disable-next-line no-empty\n  } catch {}\n\n  // TODO: add support for import.meta.env.DEV that is being used by vite\n  return false;\n};\n"],"mappings":";AAAO,IAAMA,wBAAA,GAA2BA,CAAA,KAAe;EACrD,IAAI;IACF,OAAOC,OAAA,CAAQC,GAAA,CAAIC,QAAA,KAAa;EAElC,SAAAC,OAAA,EAAQ,CAAC;EAIT,OAAO;AACT;AAEO,IAAMC,iBAAA,GAAoBA,CAAA,KAAe;EAC9C,IAAI;IACF,OAAOJ,OAAA,CAAQC,GAAA,CAAIC,QAAA,KAAa;EAElC,SAAAG,QAAA,EAAQ,CAAC;EAGT,OAAO;AACT;AAEO,IAAMC,uBAAA,GAA0BA,CAAA,KAAe;EACpD,IAAI;IACF,OAAON,OAAA,CAAQC,GAAA,CAAIC,QAAA,KAAa;EAElC,SAAAK,QAAA,EAAQ,CAAC;EAGT,OAAO;AACT","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}