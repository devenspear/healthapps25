{"ast":null,"code":"var _jsxFileName = \"/Users/devenspear/CascadeProjects/HealthApps25/src/lib/auth.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useEffect, useState } from 'react';\nimport { ClerkProvider, useAuth, useUser } from '@clerk/clerk-react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst publishableKey = process.env.REACT_APP_CLERK_PUBLISHABLE_KEY;\n\n// Development mode detection - only works on localhost\nconst isDevelopment = window.location.hostname === 'localhost' || window.location.hostname === '127.0.0.1';\n\n// Mock auth for development - starts signed out to show StartPage\nlet mockAuthState = {\n  isLoaded: true,\n  isSignedIn: false,\n  userId: null,\n  user: null,\n  signIn: () => {\n    mockAuthState.isSignedIn = true;\n    mockAuthState.userId = 'dev-user-123';\n    mockAuthState.user = {\n      firstName: 'Dev',\n      lastName: 'User',\n      primaryEmailAddress: {\n        emailAddress: 'dev@localhost.com'\n      }\n    };\n    window.location.href = '/';\n  },\n  signOut: () => {\n    mockAuthState.isSignedIn = false;\n    mockAuthState.userId = null;\n    mockAuthState.user = null;\n    console.log('Mock signOut');\n    window.location.href = '/start';\n  }\n};\nif (!publishableKey && !isDevelopment) {\n  throw new Error('Missing REACT_APP_CLERK_PUBLISHABLE_KEY environment variable');\n}\n\n// Custom auth context for our app\n\nconst AuthContext = /*#__PURE__*/createContext(null);\nexport function AuthProvider({\n  children\n}) {\n  // Use mock auth in development mode\n  if (isDevelopment) {\n    return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n      value: mockAuthState,\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this);\n  }\n\n  // Use real Clerk in production\n  return /*#__PURE__*/_jsxDEV(ClerkProvider, {\n    publishableKey: publishableKey,\n    children: /*#__PURE__*/_jsxDEV(AuthWrapper, {\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 5\n  }, this);\n}\n_c = AuthProvider;\nfunction AuthWrapper({\n  children\n}) {\n  _s();\n  const {\n    isLoaded,\n    isSignedIn,\n    userId,\n    signOut\n  } = useAuth();\n  const {\n    user\n  } = useUser();\n  const [setupDone, setSetupDone] = useState(false);\n\n  // Initialize database and create user when signed in\n  useEffect(() => {\n    async function setupUser() {\n      if (isLoaded && isSignedIn && userId && user && !setupDone) {\n        try {\n          var _user$primaryEmailAdd;\n          await fetch('/api/setup-user', {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n              userId,\n              email: (_user$primaryEmailAdd = user.primaryEmailAddress) === null || _user$primaryEmailAdd === void 0 ? void 0 : _user$primaryEmailAdd.emailAddress,\n              firstName: user.firstName,\n              lastName: user.lastName\n            })\n          });\n          setSetupDone(true);\n          console.log('User setup completed');\n        } catch (error) {\n          console.error('Error setting up user:', error);\n        }\n      }\n    }\n    setupUser();\n  }, [isLoaded, isSignedIn, userId, user, setupDone]);\n  const authValue = {\n    isLoaded,\n    isSignedIn: isSignedIn || false,\n    userId,\n    user,\n    signOut\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: authValue,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 108,\n    columnNumber: 5\n  }, this);\n}\n_s(AuthWrapper, \"qceNKBMX8X1PsJdACKjxdLkGxpU=\", false, function () {\n  return [useAuth, useUser];\n});\n_c2 = AuthWrapper;\nexport function useAppAuth() {\n  _s2();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAppAuth must be used within an AuthProvider');\n  }\n  return context;\n}\n_s2(useAppAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c, _c2;\n$RefreshReg$(_c, \"AuthProvider\");\n$RefreshReg$(_c2, \"AuthWrapper\");","map":{"version":3,"names":["React","createContext","useContext","useEffect","useState","ClerkProvider","useAuth","useUser","jsxDEV","_jsxDEV","publishableKey","process","env","REACT_APP_CLERK_PUBLISHABLE_KEY","isDevelopment","window","location","hostname","mockAuthState","isLoaded","isSignedIn","userId","user","signIn","firstName","lastName","primaryEmailAddress","emailAddress","href","signOut","console","log","Error","AuthContext","AuthProvider","children","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","AuthWrapper","_c","_s","setupDone","setSetupDone","setupUser","_user$primaryEmailAdd","fetch","method","headers","body","JSON","stringify","email","error","authValue","_c2","useAppAuth","_s2","context","$RefreshReg$"],"sources":["/Users/devenspear/CascadeProjects/HealthApps25/src/lib/auth.tsx"],"sourcesContent":["import React, { createContext, useContext, useEffect, useState } from 'react';\nimport { ClerkProvider, useAuth, useUser } from '@clerk/clerk-react';\n\nconst publishableKey = process.env.REACT_APP_CLERK_PUBLISHABLE_KEY;\n\n// Development mode detection - only works on localhost\nconst isDevelopment = window.location.hostname === 'localhost' || window.location.hostname === '127.0.0.1';\n\n// Mock auth for development - starts signed out to show StartPage\nlet mockAuthState = {\n  isLoaded: true,\n  isSignedIn: false,\n  userId: null as string | null,\n  user: null as any,\n  signIn: () => {\n    mockAuthState.isSignedIn = true;\n    mockAuthState.userId = 'dev-user-123';\n    mockAuthState.user = {\n      firstName: 'Dev',\n      lastName: 'User',\n      primaryEmailAddress: { emailAddress: 'dev@localhost.com' }\n    };\n    window.location.href = '/';\n  },\n  signOut: () => {\n    mockAuthState.isSignedIn = false;\n    mockAuthState.userId = null;\n    mockAuthState.user = null;\n    console.log('Mock signOut');\n    window.location.href = '/start';\n  }\n};\n\nif (!publishableKey && !isDevelopment) {\n  throw new Error('Missing REACT_APP_CLERK_PUBLISHABLE_KEY environment variable');\n}\n\n// Custom auth context for our app\ninterface AuthContextType {\n  isLoaded: boolean;\n  isSignedIn: boolean;\n  userId: string | null | undefined;\n  user: any;\n  signOut: () => void;\n}\n\nconst AuthContext = createContext<AuthContextType | null>(null);\n\nexport function AuthProvider({ children }: { children: React.ReactNode }) {\n  // Use mock auth in development mode\n  if (isDevelopment) {\n    return (\n      <AuthContext.Provider value={mockAuthState}>\n        {children}\n      </AuthContext.Provider>\n    );\n  }\n\n  // Use real Clerk in production\n  return (\n    <ClerkProvider publishableKey={publishableKey!}>\n      <AuthWrapper>{children}</AuthWrapper>\n    </ClerkProvider>\n  );\n}\n\nfunction AuthWrapper({ children }: { children: React.ReactNode }) {\n  const { isLoaded, isSignedIn, userId, signOut } = useAuth();\n  const { user } = useUser();\n  const [setupDone, setSetupDone] = useState(false);\n\n  // Initialize database and create user when signed in\n  useEffect(() => {\n    async function setupUser() {\n      if (isLoaded && isSignedIn && userId && user && !setupDone) {\n        try {\n          await fetch('/api/setup-user', {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({\n              userId,\n              email: user.primaryEmailAddress?.emailAddress,\n              firstName: user.firstName,\n              lastName: user.lastName,\n            }),\n          });\n\n          setSetupDone(true);\n          console.log('User setup completed');\n        } catch (error) {\n          console.error('Error setting up user:', error);\n        }\n      }\n    }\n\n    setupUser();\n  }, [isLoaded, isSignedIn, userId, user, setupDone]);\n\n  const authValue: AuthContextType = {\n    isLoaded,\n    isSignedIn: isSignedIn || false,\n    userId,\n    user,\n    signOut\n  };\n\n  return (\n    <AuthContext.Provider value={authValue}>\n      {children}\n    </AuthContext.Provider>\n  );\n}\n\nexport function useAppAuth() {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAppAuth must be used within an AuthProvider');\n  }\n  return context;\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}