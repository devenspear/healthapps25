{"ast":null,"code":"import _objectWithoutProperties from \"/Users/devenspear/CascadeProjects/Paratox1.0/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nimport _objectSpread from \"/Users/devenspear/CascadeProjects/Paratox1.0/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nconst _excluded = [\"sk\", \"pk\", \"payload\"];\nimport { isTruthy } from \"./chunk-GGFRMWFO.mjs\";\nimport { parsePublishableKey } from \"./chunk-QU372XZW.mjs\";\nimport { __privateAdd, __privateGet, __privateMethod, __privateSet } from \"./chunk-7ELT755Q.mjs\";\n\n// src/telemetry/throttler.ts\nvar DEFAULT_CACHE_TTL_MS = 864e5;\nvar _storageKey, _cacheTtl, _TelemetryEventThrottler_instances, generateKey_fn, cache_get, isValidBrowser_get;\nvar TelemetryEventThrottler = class {\n  constructor() {\n    __privateAdd(this, _TelemetryEventThrottler_instances);\n    __privateAdd(this, _storageKey, \"clerk_telemetry_throttler\");\n    __privateAdd(this, _cacheTtl, DEFAULT_CACHE_TTL_MS);\n  }\n  isEventThrottled(payload) {\n    var _privateGet;\n    if (!__privateGet(this, _TelemetryEventThrottler_instances, isValidBrowser_get)) {\n      return false;\n    }\n    const now = Date.now();\n    const key = __privateMethod(this, _TelemetryEventThrottler_instances, generateKey_fn).call(this, payload);\n    const entry = (_privateGet = __privateGet(this, _TelemetryEventThrottler_instances, cache_get)) === null || _privateGet === void 0 ? void 0 : _privateGet[key];\n    if (!entry) {\n      const updatedCache = _objectSpread(_objectSpread({}, __privateGet(this, _TelemetryEventThrottler_instances, cache_get)), {}, {\n        [key]: now\n      });\n      localStorage.setItem(__privateGet(this, _storageKey), JSON.stringify(updatedCache));\n    }\n    const shouldInvalidate = entry && now - entry > __privateGet(this, _cacheTtl);\n    if (shouldInvalidate) {\n      const updatedCache = __privateGet(this, _TelemetryEventThrottler_instances, cache_get);\n      delete updatedCache[key];\n      localStorage.setItem(__privateGet(this, _storageKey), JSON.stringify(updatedCache));\n    }\n    return !!entry;\n  }\n};\n_storageKey = new WeakMap();\n_cacheTtl = new WeakMap();\n_TelemetryEventThrottler_instances = new WeakSet();\n/**\n * Generates a consistent unique key for telemetry events by sorting payload properties.\n * This ensures that payloads with identical content in different orders produce the same key.\n */\ngenerateKey_fn = function (event) {\n  const {\n      sk: _sk,\n      pk: _pk,\n      payload\n    } = event,\n    rest = _objectWithoutProperties(event, _excluded);\n  const sanitizedEvent = _objectSpread(_objectSpread({}, payload), rest);\n  return JSON.stringify(Object.keys(_objectSpread(_objectSpread({}, payload), rest)).sort().map(key => sanitizedEvent[key]));\n};\ncache_get = function () {\n  const cacheString = localStorage.getItem(__privateGet(this, _storageKey));\n  if (!cacheString) {\n    return {};\n  }\n  return JSON.parse(cacheString);\n};\nisValidBrowser_get = function () {\n  if (typeof window === \"undefined\") {\n    return false;\n  }\n  const storage = window.localStorage;\n  if (!storage) {\n    return false;\n  }\n  try {\n    const testKey = \"test\";\n    storage.setItem(testKey, testKey);\n    storage.removeItem(testKey);\n    return true;\n  } catch (err) {\n    const isQuotaExceededError = err instanceof DOMException && (\n    // Check error names for different browsers\n    err.name === \"QuotaExceededError\" || err.name === \"NS_ERROR_DOM_QUOTA_REACHED\");\n    if (isQuotaExceededError && storage.length > 0) {\n      storage.removeItem(__privateGet(this, _storageKey));\n    }\n    return false;\n  }\n};\n\n// src/telemetry/collector.ts\nvar DEFAULT_CONFIG = {\n  samplingRate: 1,\n  maxBufferSize: 5,\n  // Production endpoint: https://clerk-telemetry.com\n  // Staging endpoint: https://staging.clerk-telemetry.com\n  // Local: http://localhost:8787\n  endpoint: \"https://clerk-telemetry.com\"\n};\nvar _config, _eventThrottler, _metadata, _buffer, _pendingFlush, _TelemetryCollector_instances, shouldRecord_fn, shouldBeSampled_fn, scheduleFlush_fn, flush_fn, logEvent_fn, getSDKMetadata_fn, preparePayload_fn;\nvar TelemetryCollector = class {\n  constructor(options) {\n    var _options$maxBufferSiz, _options$samplingRate, _options$disabled, _options$debug, _options$publishableK;\n    __privateAdd(this, _TelemetryCollector_instances);\n    __privateAdd(this, _config);\n    __privateAdd(this, _eventThrottler);\n    __privateAdd(this, _metadata, {});\n    __privateAdd(this, _buffer, []);\n    __privateAdd(this, _pendingFlush);\n    __privateSet(this, _config, {\n      maxBufferSize: (_options$maxBufferSiz = options.maxBufferSize) !== null && _options$maxBufferSiz !== void 0 ? _options$maxBufferSiz : DEFAULT_CONFIG.maxBufferSize,\n      samplingRate: (_options$samplingRate = options.samplingRate) !== null && _options$samplingRate !== void 0 ? _options$samplingRate : DEFAULT_CONFIG.samplingRate,\n      disabled: (_options$disabled = options.disabled) !== null && _options$disabled !== void 0 ? _options$disabled : false,\n      debug: (_options$debug = options.debug) !== null && _options$debug !== void 0 ? _options$debug : false,\n      endpoint: DEFAULT_CONFIG.endpoint\n    });\n    if (!options.clerkVersion && typeof window === \"undefined\") {\n      __privateGet(this, _metadata).clerkVersion = \"\";\n    } else {\n      var _options$clerkVersion;\n      __privateGet(this, _metadata).clerkVersion = (_options$clerkVersion = options.clerkVersion) !== null && _options$clerkVersion !== void 0 ? _options$clerkVersion : \"\";\n    }\n    __privateGet(this, _metadata).sdk = options.sdk;\n    __privateGet(this, _metadata).sdkVersion = options.sdkVersion;\n    __privateGet(this, _metadata).publishableKey = (_options$publishableK = options.publishableKey) !== null && _options$publishableK !== void 0 ? _options$publishableK : \"\";\n    const parsedKey = parsePublishableKey(options.publishableKey);\n    if (parsedKey) {\n      __privateGet(this, _metadata).instanceType = parsedKey.instanceType;\n    }\n    if (options.secretKey) {\n      __privateGet(this, _metadata).secretKey = options.secretKey.substring(0, 16);\n    }\n    __privateSet(this, _eventThrottler, new TelemetryEventThrottler());\n  }\n  get isEnabled() {\n    var _window;\n    if (__privateGet(this, _metadata).instanceType !== \"development\") {\n      return false;\n    }\n    if (__privateGet(this, _config).disabled || typeof process !== \"undefined\" && isTruthy(process.env.CLERK_TELEMETRY_DISABLED)) {\n      return false;\n    }\n    if (typeof window !== \"undefined\" && !!((_window = window) !== null && _window !== void 0 && (_window = _window.navigator) !== null && _window !== void 0 && _window.webdriver)) {\n      return false;\n    }\n    return true;\n  }\n  get isDebug() {\n    return __privateGet(this, _config).debug || typeof process !== \"undefined\" && isTruthy(process.env.CLERK_TELEMETRY_DEBUG);\n  }\n  record(event) {\n    const preparedPayload = __privateMethod(this, _TelemetryCollector_instances, preparePayload_fn).call(this, event.event, event.payload);\n    __privateMethod(this, _TelemetryCollector_instances, logEvent_fn).call(this, preparedPayload.event, preparedPayload);\n    if (!__privateMethod(this, _TelemetryCollector_instances, shouldRecord_fn).call(this, preparedPayload, event.eventSamplingRate)) {\n      return;\n    }\n    __privateGet(this, _buffer).push(preparedPayload);\n    __privateMethod(this, _TelemetryCollector_instances, scheduleFlush_fn).call(this);\n  }\n};\n_config = new WeakMap();\n_eventThrottler = new WeakMap();\n_metadata = new WeakMap();\n_buffer = new WeakMap();\n_pendingFlush = new WeakMap();\n_TelemetryCollector_instances = new WeakSet();\nshouldRecord_fn = function (preparedPayload, eventSamplingRate) {\n  return this.isEnabled && !this.isDebug && __privateMethod(this, _TelemetryCollector_instances, shouldBeSampled_fn).call(this, preparedPayload, eventSamplingRate);\n};\nshouldBeSampled_fn = function (preparedPayload, eventSamplingRate) {\n  const randomSeed = Math.random();\n  const toBeSampled = randomSeed <= __privateGet(this, _config).samplingRate && (typeof eventSamplingRate === \"undefined\" || randomSeed <= eventSamplingRate);\n  if (!toBeSampled) {\n    return false;\n  }\n  return !__privateGet(this, _eventThrottler).isEventThrottled(preparedPayload);\n};\nscheduleFlush_fn = function () {\n  if (typeof window === \"undefined\") {\n    __privateMethod(this, _TelemetryCollector_instances, flush_fn).call(this);\n    return;\n  }\n  const isBufferFull = __privateGet(this, _buffer).length >= __privateGet(this, _config).maxBufferSize;\n  if (isBufferFull) {\n    if (__privateGet(this, _pendingFlush)) {\n      const cancel = typeof cancelIdleCallback !== \"undefined\" ? cancelIdleCallback : clearTimeout;\n      cancel(__privateGet(this, _pendingFlush));\n    }\n    __privateMethod(this, _TelemetryCollector_instances, flush_fn).call(this);\n    return;\n  }\n  if (__privateGet(this, _pendingFlush)) {\n    return;\n  }\n  if (\"requestIdleCallback\" in window) {\n    __privateSet(this, _pendingFlush, requestIdleCallback(() => {\n      __privateMethod(this, _TelemetryCollector_instances, flush_fn).call(this);\n    }));\n  } else {\n    __privateSet(this, _pendingFlush, setTimeout(() => {\n      __privateMethod(this, _TelemetryCollector_instances, flush_fn).call(this);\n    }, 0));\n  }\n};\nflush_fn = function () {\n  fetch(new URL(\"/v1/event\", __privateGet(this, _config).endpoint), {\n    method: \"POST\",\n    // TODO: We send an array here with that idea that we can eventually send multiple events.\n    body: JSON.stringify({\n      events: __privateGet(this, _buffer)\n    }),\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  }).catch(() => void 0).then(() => {\n    __privateSet(this, _buffer, []);\n  }).catch(() => void 0);\n};\n/**\n * If running in debug mode, log the event and its payload to the console.\n */\nlogEvent_fn = function (event, payload) {\n  if (!this.isDebug) {\n    return;\n  }\n  if (typeof console.groupCollapsed !== \"undefined\") {\n    console.groupCollapsed(\"[clerk/telemetry]\", event);\n    console.log(payload);\n    console.groupEnd();\n  } else {\n    console.log(\"[clerk/telemetry]\", event, payload);\n  }\n};\n/**\n * If in browser, attempt to lazily grab the SDK metadata from the Clerk singleton, otherwise fallback to the initially passed in values.\n *\n * This is necessary because the sdkMetadata can be set by the host SDK after the TelemetryCollector is instantiated.\n */\ngetSDKMetadata_fn = function () {\n  let sdkMetadata = {\n    name: __privateGet(this, _metadata).sdk,\n    version: __privateGet(this, _metadata).sdkVersion\n  };\n  if (typeof window !== \"undefined\" && window.Clerk) {\n    sdkMetadata = _objectSpread(_objectSpread({}, sdkMetadata), window.Clerk.constructor.sdkMetadata);\n  }\n  return sdkMetadata;\n};\n/**\n * Append relevant metadata from the Clerk singleton to the event payload.\n */\npreparePayload_fn = function (event, payload) {\n  var _privateGet$clerkVer, _privateGet$instance;\n  const sdkMetadata = __privateMethod(this, _TelemetryCollector_instances, getSDKMetadata_fn).call(this);\n  return _objectSpread(_objectSpread(_objectSpread({\n    event,\n    cv: (_privateGet$clerkVer = __privateGet(this, _metadata).clerkVersion) !== null && _privateGet$clerkVer !== void 0 ? _privateGet$clerkVer : \"\",\n    it: (_privateGet$instance = __privateGet(this, _metadata).instanceType) !== null && _privateGet$instance !== void 0 ? _privateGet$instance : \"\",\n    sdk: sdkMetadata.name,\n    sdkv: sdkMetadata.version\n  }, __privateGet(this, _metadata).publishableKey ? {\n    pk: __privateGet(this, _metadata).publishableKey\n  } : {}), __privateGet(this, _metadata).secretKey ? {\n    sk: __privateGet(this, _metadata).secretKey\n  } : {}), {}, {\n    payload\n  });\n};\n\n// src/telemetry/events/component-mounted.ts\nvar EVENT_COMPONENT_MOUNTED = \"COMPONENT_MOUNTED\";\nvar EVENT_COMPONENT_OPENED = \"COMPONENT_OPENED\";\nvar EVENT_SAMPLING_RATE = 0.1;\nfunction createPrebuiltComponentEvent(event) {\n  return function (component, props, additionalPayload) {\n    var _props$appearance, _props$appearance2, _props$appearance3;\n    return {\n      event,\n      eventSamplingRate: EVENT_SAMPLING_RATE,\n      payload: _objectSpread({\n        component,\n        appearanceProp: Boolean(props === null || props === void 0 ? void 0 : props.appearance),\n        baseTheme: Boolean(props === null || props === void 0 || (_props$appearance = props.appearance) === null || _props$appearance === void 0 ? void 0 : _props$appearance.baseTheme),\n        elements: Boolean(props === null || props === void 0 || (_props$appearance2 = props.appearance) === null || _props$appearance2 === void 0 ? void 0 : _props$appearance2.elements),\n        variables: Boolean(props === null || props === void 0 || (_props$appearance3 = props.appearance) === null || _props$appearance3 === void 0 ? void 0 : _props$appearance3.variables)\n      }, additionalPayload)\n    };\n  };\n}\nfunction eventPrebuiltComponentMounted(component, props, additionalPayload) {\n  return createPrebuiltComponentEvent(EVENT_COMPONENT_MOUNTED)(component, props, additionalPayload);\n}\nfunction eventPrebuiltComponentOpened(component, props, additionalPayload) {\n  return createPrebuiltComponentEvent(EVENT_COMPONENT_OPENED)(component, props, additionalPayload);\n}\nfunction eventComponentMounted(component) {\n  let props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return {\n    event: EVENT_COMPONENT_MOUNTED,\n    eventSamplingRate: EVENT_SAMPLING_RATE,\n    payload: _objectSpread({\n      component\n    }, props)\n  };\n}\n\n// src/telemetry/events/method-called.ts\nvar EVENT_METHOD_CALLED = \"METHOD_CALLED\";\nfunction eventMethodCalled(method, payload) {\n  return {\n    event: EVENT_METHOD_CALLED,\n    payload: _objectSpread({\n      method\n    }, payload)\n  };\n}\n\n// src/telemetry/events/framework-metadata.ts\nvar EVENT_FRAMEWORK_METADATA = \"FRAMEWORK_METADATA\";\nvar EVENT_SAMPLING_RATE2 = 0.1;\nfunction eventFrameworkMetadata(payload) {\n  return {\n    event: EVENT_FRAMEWORK_METADATA,\n    eventSamplingRate: EVENT_SAMPLING_RATE2,\n    payload\n  };\n}\nexport { TelemetryCollector, eventPrebuiltComponentMounted, eventPrebuiltComponentOpened, eventComponentMounted, eventMethodCalled, eventFrameworkMetadata };","map":{"version":3,"names":["DEFAULT_CACHE_TTL_MS","_storageKey","_cacheTtl","_TelemetryEventThrottler_instances","generateKey_fn","cache_get","isValidBrowser_get","TelemetryEventThrottler","constructor","__privateAdd","isEventThrottled","payload","_privateGet","__privateGet","now","Date","key","__privateMethod","call","entry","updatedCache","_objectSpread","localStorage","setItem","JSON","stringify","shouldInvalidate","WeakMap","WeakSet","event","sk","_sk","pk","_pk","rest","_objectWithoutProperties","_excluded","sanitizedEvent","Object","keys","sort","map","cacheString","getItem","parse","window","storage","testKey","removeItem","err","isQuotaExceededError","DOMException","name","length","DEFAULT_CONFIG","samplingRate","maxBufferSize","endpoint","_config","_eventThrottler","_metadata","_buffer","_pendingFlush","_TelemetryCollector_instances","shouldRecord_fn","shouldBeSampled_fn","scheduleFlush_fn","flush_fn","logEvent_fn","getSDKMetadata_fn","preparePayload_fn","TelemetryCollector","options","_options$maxBufferSiz","_options$samplingRate","_options$disabled","_options$debug","_options$publishableK","__privateSet","disabled","debug","clerkVersion","_options$clerkVersion","sdk","sdkVersion","publishableKey","parsedKey","parsePublishableKey","instanceType","secretKey","substring","isEnabled","_window","process","isTruthy","env","CLERK_TELEMETRY_DISABLED","navigator","webdriver","isDebug","CLERK_TELEMETRY_DEBUG","record","preparedPayload","eventSamplingRate","push","randomSeed","Math","random","toBeSampled","isBufferFull","cancel","cancelIdleCallback","clearTimeout","requestIdleCallback","setTimeout","fetch","URL","method","body","events","headers","catch","then","console","groupCollapsed","log","groupEnd","sdkMetadata","version","Clerk","_privateGet$clerkVer","_privateGet$instance","cv","it","sdkv","EVENT_COMPONENT_MOUNTED","EVENT_COMPONENT_OPENED","EVENT_SAMPLING_RATE","createPrebuiltComponentEvent","component","props","additionalPayload","_props$appearance","_props$appearance2","_props$appearance3","appearanceProp","Boolean","appearance","baseTheme","elements","variables","eventPrebuiltComponentMounted","eventPrebuiltComponentOpened","eventComponentMounted","arguments","undefined","EVENT_METHOD_CALLED","eventMethodCalled","EVENT_FRAMEWORK_METADATA","EVENT_SAMPLING_RATE2","eventFrameworkMetadata"],"sources":["/Users/devenspear/CascadeProjects/Paratox1.0/node_modules/@clerk/shared/src/telemetry/throttler.ts","/Users/devenspear/CascadeProjects/Paratox1.0/node_modules/@clerk/shared/src/telemetry/collector.ts","/Users/devenspear/CascadeProjects/Paratox1.0/node_modules/@clerk/shared/src/telemetry/events/component-mounted.ts","/Users/devenspear/CascadeProjects/Paratox1.0/node_modules/@clerk/shared/src/telemetry/events/method-called.ts","/Users/devenspear/CascadeProjects/Paratox1.0/node_modules/@clerk/shared/src/telemetry/events/framework-metadata.ts"],"sourcesContent":["import type { TelemetryEvent } from '@clerk/types';\n\ntype TtlInMilliseconds = number;\n\nconst DEFAULT_CACHE_TTL_MS = 86400000; // 24 hours\n\n/**\n * Manages throttling for telemetry events using the browser's localStorage to\n * mitigate event flooding in frequently executed code paths.\n */\nexport class TelemetryEventThrottler {\n  #storageKey = 'clerk_telemetry_throttler';\n  #cacheTtl = DEFAULT_CACHE_TTL_MS;\n\n  isEventThrottled(payload: TelemetryEvent): boolean {\n    if (!this.#isValidBrowser) {\n      return false;\n    }\n\n    const now = Date.now();\n    const key = this.#generateKey(payload);\n    const entry = this.#cache?.[key];\n\n    if (!entry) {\n      const updatedCache = {\n        ...this.#cache,\n        [key]: now,\n      };\n\n      localStorage.setItem(this.#storageKey, JSON.stringify(updatedCache));\n    }\n\n    const shouldInvalidate = entry && now - entry > this.#cacheTtl;\n    if (shouldInvalidate) {\n      const updatedCache = this.#cache;\n      delete updatedCache[key];\n\n      localStorage.setItem(this.#storageKey, JSON.stringify(updatedCache));\n    }\n\n    return !!entry;\n  }\n\n  /**\n   * Generates a consistent unique key for telemetry events by sorting payload properties.\n   * This ensures that payloads with identical content in different orders produce the same key.\n   */\n  #generateKey(event: TelemetryEvent): string {\n    const { sk: _sk, pk: _pk, payload, ...rest } = event;\n\n    const sanitizedEvent: Omit<TelemetryEvent, 'sk' | 'pk' | 'payload'> & TelemetryEvent['payload'] = {\n      ...payload,\n      ...rest,\n    };\n\n    return JSON.stringify(\n      Object.keys({\n        ...payload,\n        ...rest,\n      })\n        .sort()\n        .map(key => sanitizedEvent[key]),\n    );\n  }\n\n  get #cache(): Record<string, TtlInMilliseconds> | undefined {\n    const cacheString = localStorage.getItem(this.#storageKey);\n\n    if (!cacheString) {\n      return {};\n    }\n\n    return JSON.parse(cacheString);\n  }\n\n  /**\n   * Checks if the browser's localStorage is supported and writable.\n   *\n   * If any of these operations fail, it indicates that localStorage is either\n   * not supported or not writable (e.g., in cases where the storage is full or\n   * the browser is in a privacy mode that restricts localStorage usage).\n   */\n  get #isValidBrowser(): boolean {\n    if (typeof window === 'undefined') {\n      return false;\n    }\n\n    const storage = window.localStorage;\n    if (!storage) {\n      return false;\n    }\n\n    try {\n      const testKey = 'test';\n      storage.setItem(testKey, testKey);\n      storage.removeItem(testKey);\n\n      return true;\n    } catch (err: unknown) {\n      const isQuotaExceededError =\n        err instanceof DOMException &&\n        // Check error names for different browsers\n        (err.name === 'QuotaExceededError' || err.name === 'NS_ERROR_DOM_QUOTA_REACHED');\n\n      if (isQuotaExceededError && storage.length > 0) {\n        storage.removeItem(this.#storageKey);\n      }\n\n      return false;\n    }\n  }\n}\n","/**\n * The `TelemetryCollector` class handles collection of telemetry events from Clerk SDKs. Telemetry is opt-out and can be disabled by setting a CLERK_TELEMETRY_DISABLED environment variable.\n * The `ClerkProvider` also accepts a `telemetry` prop that will be passed to the collector during initialization:\n *\n * ```jsx\n * <ClerkProvider telemetry={false}>\n *    ...\n * </ClerkProvider>\n * ```\n *\n * For more information, please see the telemetry documentation page: https://clerk.com/docs/telemetry\n */\nimport type {\n  InstanceType,\n  TelemetryCollector as TelemetryCollectorInterface,\n  TelemetryEvent,\n  TelemetryEventRaw,\n} from '@clerk/types';\n\nimport { parsePublishableKey } from '../keys';\nimport { isTruthy } from '../underscore';\nimport { TelemetryEventThrottler } from './throttler';\nimport type { TelemetryCollectorOptions } from './types';\n\ntype TelemetryCollectorConfig = Pick<\n  TelemetryCollectorOptions,\n  'samplingRate' | 'disabled' | 'debug' | 'maxBufferSize'\n> & {\n  endpoint: string;\n};\n\ntype TelemetryMetadata = Required<\n  Pick<TelemetryCollectorOptions, 'clerkVersion' | 'sdk' | 'sdkVersion' | 'publishableKey' | 'secretKey'>\n> & {\n  /**\n   * The instance type, derived from the provided publishableKey.\n   */\n  instanceType: InstanceType;\n};\n\nconst DEFAULT_CONFIG: Partial<TelemetryCollectorConfig> = {\n  samplingRate: 1,\n  maxBufferSize: 5,\n  // Production endpoint: https://clerk-telemetry.com\n  // Staging endpoint: https://staging.clerk-telemetry.com\n  // Local: http://localhost:8787\n  endpoint: 'https://clerk-telemetry.com',\n};\n\nexport class TelemetryCollector implements TelemetryCollectorInterface {\n  #config: Required<TelemetryCollectorConfig>;\n  #eventThrottler: TelemetryEventThrottler;\n  #metadata: TelemetryMetadata = {} as TelemetryMetadata;\n  #buffer: TelemetryEvent[] = [];\n  #pendingFlush: any;\n\n  constructor(options: TelemetryCollectorOptions) {\n    this.#config = {\n      maxBufferSize: options.maxBufferSize ?? DEFAULT_CONFIG.maxBufferSize,\n      samplingRate: options.samplingRate ?? DEFAULT_CONFIG.samplingRate,\n      disabled: options.disabled ?? false,\n      debug: options.debug ?? false,\n      endpoint: DEFAULT_CONFIG.endpoint,\n    } as Required<TelemetryCollectorConfig>;\n\n    if (!options.clerkVersion && typeof window === 'undefined') {\n      // N/A in a server environment\n      this.#metadata.clerkVersion = '';\n    } else {\n      this.#metadata.clerkVersion = options.clerkVersion ?? '';\n    }\n\n    // We will try to grab the SDK data lazily when an event is triggered, so it should always be defined once the event is sent.\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    this.#metadata.sdk = options.sdk!;\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    this.#metadata.sdkVersion = options.sdkVersion!;\n\n    this.#metadata.publishableKey = options.publishableKey ?? '';\n\n    const parsedKey = parsePublishableKey(options.publishableKey);\n    if (parsedKey) {\n      this.#metadata.instanceType = parsedKey.instanceType;\n    }\n\n    if (options.secretKey) {\n      // Only send the first 16 characters of the secret key to to avoid sending the full key. We can still query against the partial key.\n      this.#metadata.secretKey = options.secretKey.substring(0, 16);\n    }\n\n    this.#eventThrottler = new TelemetryEventThrottler();\n  }\n\n  get isEnabled(): boolean {\n    if (this.#metadata.instanceType !== 'development') {\n      return false;\n    }\n\n    // In browser or client environments, we most likely pass the disabled option to the collector, but in environments\n    // where environment variables are available we also check for `CLERK_TELEMETRY_DISABLED`.\n    if (this.#config.disabled || (typeof process !== 'undefined' && isTruthy(process.env.CLERK_TELEMETRY_DISABLED))) {\n      return false;\n    }\n\n    // navigator.webdriver is a property generally set by headless browsers that are running in an automated testing environment.\n    // Data from these environments is not meaningful for us and has the potential to produce a large volume of events, so we disable\n    // collection in this case. (ref: https://developer.mozilla.org/en-US/docs/Web/API/Navigator/webdriver)\n    if (typeof window !== 'undefined' && !!window?.navigator?.webdriver) {\n      return false;\n    }\n\n    return true;\n  }\n\n  get isDebug(): boolean {\n    return this.#config.debug || (typeof process !== 'undefined' && isTruthy(process.env.CLERK_TELEMETRY_DEBUG));\n  }\n\n  record(event: TelemetryEventRaw): void {\n    const preparedPayload = this.#preparePayload(event.event, event.payload);\n\n    this.#logEvent(preparedPayload.event, preparedPayload);\n\n    if (!this.#shouldRecord(preparedPayload, event.eventSamplingRate)) {\n      return;\n    }\n\n    this.#buffer.push(preparedPayload);\n\n    this.#scheduleFlush();\n  }\n\n  #shouldRecord(preparedPayload: TelemetryEvent, eventSamplingRate?: number) {\n    return this.isEnabled && !this.isDebug && this.#shouldBeSampled(preparedPayload, eventSamplingRate);\n  }\n\n  #shouldBeSampled(preparedPayload: TelemetryEvent, eventSamplingRate?: number) {\n    const randomSeed = Math.random();\n\n    const toBeSampled =\n      randomSeed <= this.#config.samplingRate &&\n      (typeof eventSamplingRate === 'undefined' || randomSeed <= eventSamplingRate);\n\n    if (!toBeSampled) {\n      return false;\n    }\n\n    return !this.#eventThrottler.isEventThrottled(preparedPayload);\n  }\n\n  #scheduleFlush(): void {\n    // On the server, we want to flush immediately as we have less guarantees about the lifecycle of the process\n    if (typeof window === 'undefined') {\n      this.#flush();\n      return;\n    }\n\n    const isBufferFull = this.#buffer.length >= this.#config.maxBufferSize;\n    if (isBufferFull) {\n      // If the buffer is full, flush immediately to make sure we minimize the chance of event loss.\n      // Cancel any pending flushes as we're going to flush immediately\n      if (this.#pendingFlush) {\n        const cancel = typeof cancelIdleCallback !== 'undefined' ? cancelIdleCallback : clearTimeout;\n        cancel(this.#pendingFlush);\n      }\n      this.#flush();\n      return;\n    }\n\n    // If we have a pending flush, do nothing\n    if (this.#pendingFlush) {\n      return;\n    }\n\n    if ('requestIdleCallback' in window) {\n      this.#pendingFlush = requestIdleCallback(() => {\n        this.#flush();\n      });\n    } else {\n      // This is not an ideal solution, but it at least waits until the next tick\n      this.#pendingFlush = setTimeout(() => {\n        this.#flush();\n      }, 0);\n    }\n  }\n\n  #flush(): void {\n    fetch(new URL('/v1/event', this.#config.endpoint), {\n      method: 'POST',\n      // TODO: We send an array here with that idea that we can eventually send multiple events.\n      body: JSON.stringify({\n        events: this.#buffer,\n      }),\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    })\n      .catch(() => void 0)\n      .then(() => {\n        this.#buffer = [];\n      })\n      .catch(() => void 0);\n  }\n\n  /**\n   * If running in debug mode, log the event and its payload to the console.\n   */\n  #logEvent(event: TelemetryEvent['event'], payload: Record<string, any>) {\n    if (!this.isDebug) {\n      return;\n    }\n\n    if (typeof console.groupCollapsed !== 'undefined') {\n      console.groupCollapsed('[clerk/telemetry]', event);\n      console.log(payload);\n      console.groupEnd();\n    } else {\n      console.log('[clerk/telemetry]', event, payload);\n    }\n  }\n\n  /**\n   * If in browser, attempt to lazily grab the SDK metadata from the Clerk singleton, otherwise fallback to the initially passed in values.\n   *\n   * This is necessary because the sdkMetadata can be set by the host SDK after the TelemetryCollector is instantiated.\n   */\n  #getSDKMetadata() {\n    let sdkMetadata = {\n      name: this.#metadata.sdk,\n      version: this.#metadata.sdkVersion,\n    };\n\n    // @ts-expect-error -- The global window.Clerk type is declared in clerk-js, but we can't rely on that here\n    if (typeof window !== 'undefined' && window.Clerk) {\n      // @ts-expect-error -- The global window.Clerk type is declared in clerk-js, but we can't rely on that here\n      sdkMetadata = { ...sdkMetadata, ...window.Clerk.constructor.sdkMetadata };\n    }\n\n    return sdkMetadata;\n  }\n\n  /**\n   * Append relevant metadata from the Clerk singleton to the event payload.\n   */\n  #preparePayload(event: TelemetryEvent['event'], payload: TelemetryEvent['payload']): TelemetryEvent {\n    const sdkMetadata = this.#getSDKMetadata();\n\n    return {\n      event,\n      cv: this.#metadata.clerkVersion ?? '',\n      it: this.#metadata.instanceType ?? '',\n      sdk: sdkMetadata.name,\n      sdkv: sdkMetadata.version,\n      ...(this.#metadata.publishableKey ? { pk: this.#metadata.publishableKey } : {}),\n      ...(this.#metadata.secretKey ? { sk: this.#metadata.secretKey } : {}),\n      payload,\n    };\n  }\n}\n","import type { TelemetryEventRaw } from '@clerk/types';\n\nconst EVENT_COMPONENT_MOUNTED = 'COMPONENT_MOUNTED';\nconst EVENT_COMPONENT_OPENED = 'COMPONENT_OPENED';\nconst EVENT_SAMPLING_RATE = 0.1;\n\ntype ComponentMountedBase = {\n  component: string;\n};\n\ntype EventPrebuiltComponent = ComponentMountedBase & {\n  appearanceProp: boolean;\n  elements: boolean;\n  variables: boolean;\n  baseTheme: boolean;\n};\n\ntype EventComponentMounted = ComponentMountedBase & TelemetryEventRaw['payload'];\n\nfunction createPrebuiltComponentEvent(event: typeof EVENT_COMPONENT_MOUNTED | typeof EVENT_COMPONENT_OPENED) {\n  return function (\n    component: string,\n    props?: Record<string, any>,\n    additionalPayload?: TelemetryEventRaw['payload'],\n  ): TelemetryEventRaw<EventPrebuiltComponent> {\n    return {\n      event,\n      eventSamplingRate: EVENT_SAMPLING_RATE,\n      payload: {\n        component,\n        appearanceProp: Boolean(props?.appearance),\n        baseTheme: Boolean(props?.appearance?.baseTheme),\n        elements: Boolean(props?.appearance?.elements),\n        variables: Boolean(props?.appearance?.variables),\n        ...additionalPayload,\n      },\n    };\n  };\n}\n\n/**\n * Helper function for `telemetry.record()`. Create a consistent event object for when a prebuilt (AIO) component is mounted.\n *\n * @param component - The name of the component.\n * @param props - The props passed to the component. Will be filtered to a known list of props.\n * @param additionalPayload - Additional data to send with the event.\n *\n * @example\n * telemetry.record(eventPrebuiltComponentMounted('SignUp', props));\n */\nexport function eventPrebuiltComponentMounted(\n  component: string,\n  props?: Record<string, any>,\n  additionalPayload?: TelemetryEventRaw['payload'],\n): TelemetryEventRaw<EventPrebuiltComponent> {\n  return createPrebuiltComponentEvent(EVENT_COMPONENT_MOUNTED)(component, props, additionalPayload);\n}\n\n/**\n * Helper function for `telemetry.record()`. Create a consistent event object for when a prebuilt (AIO) component is opened as a modal.\n *\n * @param component - The name of the component.\n * @param props - The props passed to the component. Will be filtered to a known list of props.\n * @param additionalPayload - Additional data to send with the event.\n *\n * @example\n * telemetry.record(eventPrebuiltComponentOpened('GoogleOneTap', props));\n */\nexport function eventPrebuiltComponentOpened(\n  component: string,\n  props?: Record<string, any>,\n  additionalPayload?: TelemetryEventRaw['payload'],\n): TelemetryEventRaw<EventPrebuiltComponent> {\n  return createPrebuiltComponentEvent(EVENT_COMPONENT_OPENED)(component, props, additionalPayload);\n}\n\n/**\n * Helper function for `telemetry.record()`. Create a consistent event object for when a component is mounted. Use `eventPrebuiltComponentMounted` for prebuilt components.\n *\n * **Caution:** Filter the `props` you pass to this function to avoid sending too much data.\n *\n * @param component - The name of the component.\n * @param props - The props passed to the component. Ideally you only pass a handful of props here.\n *\n * @example\n * telemetry.record(eventComponentMounted('SignUp', props));\n */\nexport function eventComponentMounted(\n  component: string,\n  props: TelemetryEventRaw['payload'] = {},\n): TelemetryEventRaw<EventComponentMounted> {\n  return {\n    event: EVENT_COMPONENT_MOUNTED,\n    eventSamplingRate: EVENT_SAMPLING_RATE,\n    payload: {\n      component,\n      ...props,\n    },\n  };\n}\n","import type { TelemetryEventRaw } from '@clerk/types';\n\nconst EVENT_METHOD_CALLED = 'METHOD_CALLED';\n\ntype EventMethodCalled = {\n  method: string;\n} & Record<string, string | number | boolean>;\n\n/**\n * Fired when a helper method is called from a Clerk SDK.\n */\nexport function eventMethodCalled(\n  method: string,\n  payload?: Record<string, unknown>,\n): TelemetryEventRaw<EventMethodCalled> {\n  return {\n    event: EVENT_METHOD_CALLED,\n    payload: {\n      method,\n      ...payload,\n    },\n  };\n}\n","import type { TelemetryEventRaw } from '@clerk/types';\n\nconst EVENT_FRAMEWORK_METADATA = 'FRAMEWORK_METADATA';\nconst EVENT_SAMPLING_RATE = 0.1;\n\ntype EventFrameworkMetadata = Record<string, string | number | boolean>;\n\n/**\n * Fired when a helper method is called from a Clerk SDK.\n */\nexport function eventFrameworkMetadata(payload: EventFrameworkMetadata): TelemetryEventRaw<EventFrameworkMetadata> {\n  return {\n    event: EVENT_FRAMEWORK_METADATA,\n    eventSamplingRate: EVENT_SAMPLING_RATE,\n    payload,\n  };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}