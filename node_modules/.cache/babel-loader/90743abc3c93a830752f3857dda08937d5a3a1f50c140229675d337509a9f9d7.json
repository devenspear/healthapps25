{"ast":null,"code":"const generateTasks=day=>{const baseTasks=[{id:\"\".concat(day,\"-morning\"),time:\"Morning\",description:\"1–20 drops Black Walnut (empty stomach)\",completed:false},{id:\"\".concat(day,\"-midday\"),time:\"Midday\",description:\"500–1000 mg Wormwood (pre‑lunch)\",completed:false},{id:\"\".concat(day,\"-evening\"),time:\"Evening\",description:\"500 mg Clove (after dinner)\",completed:false}];// Add additional supplements based on phase\nif(day>=8){baseTasks.push({id:\"\".concat(day,\"-bedtime\"),time:\"Bedtime\",description:\"1 tbsp Diatomaceous Earth OR Bentonite Clay\",completed:false});}if(day>=1){baseTasks.push({id:\"\".concat(day,\"-fasted\"),time:\"AM (fasted)\",description:\"120,000 SU Serrapeptase\",completed:false});baseTasks.push({id:\"\".concat(day,\"-dinner\"),time:\"Dinner\",description:\"25 mg Zinc\",completed:false});baseTasks.push({id:\"\".concat(day,\"-daily\"),time:\"Daily\",description:\"1g Vitamin C (twice daily)\",completed:false});}if(day>=22){baseTasks.push({id:\"\".concat(day,\"-rebuild-am\"),time:\"AM\",description:\"50B CFU Probiotic\",completed:false});baseTasks.push({id:\"\".concat(day,\"-rebuild-pm\"),time:\"PM\",description:\"5g L-Glutamine\",completed:false});}return baseTasks;};export const cleanseCalendar=Array.from({length:28},(_,index)=>{const day=index+1;const week=Math.ceil(day/7);let phase=\"\";if(day<=7)phase=\"Priming\";else if(day<=14)phase=\"Kill - Phase 1\";else if(day<=21)phase=\"Kill - Phase 2\";else phase=\"Rebuild\";return{day,week,title:\"Day \".concat(day,\" \\u2014 Week \").concat(week,\": \").concat(phase),phase,tasks:generateTasks(day),completed:false};});","map":{"version":3,"names":["generateTasks","day","baseTasks","id","concat","time","description","completed","push","cleanseCalendar","Array","from","length","_","index","week","Math","ceil","phase","title","tasks"],"sources":["/Users/devenspear/CascadeProjects/Paratox1.0/src/data/cleanseCalendar.ts"],"sourcesContent":["import { DayEntry, Task } from '../types';\n\nconst generateTasks = (day: number): Task[] => {\n  const baseTasks: Task[] = [\n    {\n      id: `${day}-morning`,\n      time: \"Morning\",\n      description: \"1–20 drops Black Walnut (empty stomach)\",\n      completed: false\n    },\n    {\n      id: `${day}-midday`,\n      time: \"Midday\",\n      description: \"500–1000 mg Wormwood (pre‑lunch)\",\n      completed: false\n    },\n    {\n      id: `${day}-evening`,\n      time: \"Evening\",\n      description: \"500 mg Clove (after dinner)\",\n      completed: false\n    }\n  ];\n\n  // Add additional supplements based on phase\n  if (day >= 8) {\n    baseTasks.push({\n      id: `${day}-bedtime`,\n      time: \"Bedtime\",\n      description: \"1 tbsp Diatomaceous Earth OR Bentonite Clay\",\n      completed: false\n    });\n  }\n\n  if (day >= 1) {\n    baseTasks.push({\n      id: `${day}-fasted`,\n      time: \"AM (fasted)\",\n      description: \"120,000 SU Serrapeptase\",\n      completed: false\n    });\n    \n    baseTasks.push({\n      id: `${day}-dinner`,\n      time: \"Dinner\",\n      description: \"25 mg Zinc\",\n      completed: false\n    });\n    \n    baseTasks.push({\n      id: `${day}-daily`,\n      time: \"Daily\",\n      description: \"1g Vitamin C (twice daily)\",\n      completed: false\n    });\n  }\n\n  if (day >= 22) {\n    baseTasks.push({\n      id: `${day}-rebuild-am`,\n      time: \"AM\",\n      description: \"50B CFU Probiotic\",\n      completed: false\n    });\n    \n    baseTasks.push({\n      id: `${day}-rebuild-pm`,\n      time: \"PM\",\n      description: \"5g L-Glutamine\",\n      completed: false\n    });\n  }\n\n  return baseTasks;\n};\n\nexport const cleanseCalendar: DayEntry[] = Array.from({ length: 28 }, (_, index) => {\n  const day = index + 1;\n  const week = Math.ceil(day / 7);\n  \n  let phase = \"\";\n  if (day <= 7) phase = \"Priming\";\n  else if (day <= 14) phase = \"Kill - Phase 1\";\n  else if (day <= 21) phase = \"Kill - Phase 2\";\n  else phase = \"Rebuild\";\n\n  return {\n    day,\n    week,\n    title: `Day ${day} — Week ${week}: ${phase}`,\n    phase,\n    tasks: generateTasks(day),\n    completed: false\n  };\n}); "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}