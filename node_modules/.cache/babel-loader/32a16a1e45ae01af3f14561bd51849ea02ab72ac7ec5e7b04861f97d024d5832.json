{"ast":null,"code":"var _jsxFileName = \"/Users/devenspear/CascadeProjects/HealthApps25/src/lib/auth.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useEffect, useState } from 'react';\nimport { ClerkProvider, useAuth, useUser } from '@clerk/clerk-react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst publishableKey = process.env.REACT_APP_CLERK_PUBLISHABLE_KEY;\nif (!publishableKey) {\n  throw new Error('Missing REACT_APP_CLERK_PUBLISHABLE_KEY environment variable');\n}\n\n// Custom auth context for our app\n\nconst AuthContext = /*#__PURE__*/createContext(null);\nexport function AuthProvider({\n  children\n}) {\n  return /*#__PURE__*/_jsxDEV(ClerkProvider, {\n    publishableKey: publishableKey,\n    children: /*#__PURE__*/_jsxDEV(AuthWrapper, {\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 5\n  }, this);\n}\n_c = AuthProvider;\nfunction AuthWrapper({\n  children\n}) {\n  _s();\n  const {\n    isLoaded,\n    isSignedIn,\n    userId,\n    signOut\n  } = useAuth();\n  const {\n    user\n  } = useUser();\n  const [setupDone, setSetupDone] = useState(false);\n\n  // Initialize database and create user when signed in\n  useEffect(() => {\n    async function setupUser() {\n      if (isLoaded && isSignedIn && userId && user && !setupDone) {\n        try {\n          var _user$primaryEmailAdd;\n          await fetch('/api/setup-user', {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n              userId,\n              email: (_user$primaryEmailAdd = user.primaryEmailAddress) === null || _user$primaryEmailAdd === void 0 ? void 0 : _user$primaryEmailAdd.emailAddress,\n              firstName: user.firstName,\n              lastName: user.lastName\n            })\n          });\n          setSetupDone(true);\n          console.log('User setup completed');\n        } catch (error) {\n          console.error('Error setting up user:', error);\n        }\n      }\n    }\n    setupUser();\n  }, [isLoaded, isSignedIn, userId, user, setupDone]);\n  const authValue = {\n    isLoaded,\n    isSignedIn: isSignedIn || false,\n    userId,\n    user,\n    signOut\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: authValue,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 5\n  }, this);\n}\n_s(AuthWrapper, \"qceNKBMX8X1PsJdACKjxdLkGxpU=\", false, function () {\n  return [useAuth, useUser];\n});\n_c2 = AuthWrapper;\nexport function useAppAuth() {\n  _s2();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAppAuth must be used within an AuthProvider');\n  }\n  return context;\n}\n_s2(useAppAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c, _c2;\n$RefreshReg$(_c, \"AuthProvider\");\n$RefreshReg$(_c2, \"AuthWrapper\");","map":{"version":3,"names":["React","createContext","useContext","useEffect","useState","ClerkProvider","useAuth","useUser","jsxDEV","_jsxDEV","publishableKey","process","env","REACT_APP_CLERK_PUBLISHABLE_KEY","Error","AuthContext","AuthProvider","children","AuthWrapper","fileName","_jsxFileName","lineNumber","columnNumber","_c","_s","isLoaded","isSignedIn","userId","signOut","user","setupDone","setSetupDone","setupUser","_user$primaryEmailAdd","fetch","method","headers","body","JSON","stringify","email","primaryEmailAddress","emailAddress","firstName","lastName","console","log","error","authValue","Provider","value","_c2","useAppAuth","_s2","context","$RefreshReg$"],"sources":["/Users/devenspear/CascadeProjects/HealthApps25/src/lib/auth.tsx"],"sourcesContent":["import React, { createContext, useContext, useEffect, useState } from 'react';\nimport { ClerkProvider, useAuth, useUser } from '@clerk/clerk-react';\n\nconst publishableKey = process.env.REACT_APP_CLERK_PUBLISHABLE_KEY;\n\nif (!publishableKey) {\n  throw new Error('Missing REACT_APP_CLERK_PUBLISHABLE_KEY environment variable');\n}\n\n// Custom auth context for our app\ninterface AuthContextType {\n  isLoaded: boolean;\n  isSignedIn: boolean;\n  userId: string | null | undefined;\n  user: any;\n  signOut: () => void;\n}\n\nconst AuthContext = createContext<AuthContextType | null>(null);\n\nexport function AuthProvider({ children }: { children: React.ReactNode }) {\n  return (\n    <ClerkProvider publishableKey={publishableKey!}>\n      <AuthWrapper>{children}</AuthWrapper>\n    </ClerkProvider>\n  );\n}\n\nfunction AuthWrapper({ children }: { children: React.ReactNode }) {\n  const { isLoaded, isSignedIn, userId, signOut } = useAuth();\n  const { user } = useUser();\n  const [setupDone, setSetupDone] = useState(false);\n\n  // Initialize database and create user when signed in\n  useEffect(() => {\n    async function setupUser() {\n      if (isLoaded && isSignedIn && userId && user && !setupDone) {\n        try {\n          await fetch('/api/setup-user', {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({\n              userId,\n              email: user.primaryEmailAddress?.emailAddress,\n              firstName: user.firstName,\n              lastName: user.lastName,\n            }),\n          });\n\n          setSetupDone(true);\n          console.log('User setup completed');\n        } catch (error) {\n          console.error('Error setting up user:', error);\n        }\n      }\n    }\n\n    setupUser();\n  }, [isLoaded, isSignedIn, userId, user, setupDone]);\n\n  const authValue: AuthContextType = {\n    isLoaded,\n    isSignedIn: isSignedIn || false,\n    userId,\n    user,\n    signOut\n  };\n\n  return (\n    <AuthContext.Provider value={authValue}>\n      {children}\n    </AuthContext.Provider>\n  );\n}\n\nexport function useAppAuth() {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAppAuth must be used within an AuthProvider');\n  }\n  return context;\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}