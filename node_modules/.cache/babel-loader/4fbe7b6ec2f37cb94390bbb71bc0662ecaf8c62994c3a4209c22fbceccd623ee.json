{"ast":null,"code":"// Utility for making authenticated requests\nasync function request(path, options) {\n  const {\n    userId,\n    ...fetchOptions\n  } = options;\n  const res = await fetch(`${path}?userId=${encodeURIComponent(userId)}`, {\n    ...fetchOptions,\n    headers: {\n      'Content-Type': 'application/json',\n      ...(fetchOptions.headers || {})\n    }\n  });\n  if (!res.ok) {\n    const body = await res.json().catch(() => ({}));\n    throw new Error(body.error || `Request failed with status ${res.status}`);\n  }\n  return res.json();\n}\nexport async function fetchProgress(userId) {\n  const data = await request('/api/progress', {\n    method: 'GET',\n    userId\n  });\n  return data.progress;\n}\nexport async function saveProgress(userId, progress) {\n  await request('/api/progress', {\n    method: 'POST',\n    body: JSON.stringify({\n      userId,\n      progress\n    }),\n    userId\n  });\n}","map":{"version":3,"names":["request","path","options","userId","fetchOptions","res","fetch","encodeURIComponent","headers","ok","body","json","catch","Error","error","status","fetchProgress","data","method","progress","saveProgress","JSON","stringify"],"sources":["/Users/devenspear/CascadeProjects/Paratox1.0/src/lib/api.ts"],"sourcesContent":["import { UserProgress } from '../types';\n\n// Utility for making authenticated requests\nasync function request(path: string, options: RequestInit & { userId: string }): Promise<any> {\n  const { userId, ...fetchOptions } = options;\n  const res = await fetch(`${path}?userId=${encodeURIComponent(userId)}`, {\n    ...fetchOptions,\n    headers: {\n      'Content-Type': 'application/json',\n      ...(fetchOptions.headers || {})\n    }\n  });\n\n  if (!res.ok) {\n    const body = await res.json().catch(() => ({}));\n    throw new Error(body.error || `Request failed with status ${res.status}`);\n  }\n\n  return res.json();\n}\n\nexport async function fetchProgress(userId: string): Promise<UserProgress | null> {\n  const data = await request('/api/progress', { method: 'GET', userId });\n  return data.progress as UserProgress;\n}\n\nexport async function saveProgress(userId: string, progress: UserProgress) {\n  await request('/api/progress', {\n    method: 'POST',\n    body: JSON.stringify({ userId, progress }),\n    userId\n  });\n} "],"mappings":"AAEA;AACA,eAAeA,OAAOA,CAACC,IAAY,EAAEC,OAAyC,EAAgB;EAC5F,MAAM;IAAEC,MAAM;IAAE,GAAGC;EAAa,CAAC,GAAGF,OAAO;EAC3C,MAAMG,GAAG,GAAG,MAAMC,KAAK,CAAC,GAAGL,IAAI,WAAWM,kBAAkB,CAACJ,MAAM,CAAC,EAAE,EAAE;IACtE,GAAGC,YAAY;IACfI,OAAO,EAAE;MACP,cAAc,EAAE,kBAAkB;MAClC,IAAIJ,YAAY,CAACI,OAAO,IAAI,CAAC,CAAC;IAChC;EACF,CAAC,CAAC;EAEF,IAAI,CAACH,GAAG,CAACI,EAAE,EAAE;IACX,MAAMC,IAAI,GAAG,MAAML,GAAG,CAACM,IAAI,CAAC,CAAC,CAACC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;IAC/C,MAAM,IAAIC,KAAK,CAACH,IAAI,CAACI,KAAK,IAAI,8BAA8BT,GAAG,CAACU,MAAM,EAAE,CAAC;EAC3E;EAEA,OAAOV,GAAG,CAACM,IAAI,CAAC,CAAC;AACnB;AAEA,OAAO,eAAeK,aAAaA,CAACb,MAAc,EAAgC;EAChF,MAAMc,IAAI,GAAG,MAAMjB,OAAO,CAAC,eAAe,EAAE;IAAEkB,MAAM,EAAE,KAAK;IAAEf;EAAO,CAAC,CAAC;EACtE,OAAOc,IAAI,CAACE,QAAQ;AACtB;AAEA,OAAO,eAAeC,YAAYA,CAACjB,MAAc,EAAEgB,QAAsB,EAAE;EACzE,MAAMnB,OAAO,CAAC,eAAe,EAAE;IAC7BkB,MAAM,EAAE,MAAM;IACdR,IAAI,EAAEW,IAAI,CAACC,SAAS,CAAC;MAAEnB,MAAM;MAAEgB;IAAS,CAAC,CAAC;IAC1ChB;EACF,CAAC,CAAC;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}