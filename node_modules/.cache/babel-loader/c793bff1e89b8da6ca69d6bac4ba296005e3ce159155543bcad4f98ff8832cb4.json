{"ast":null,"code":"import _objectSpread from\"/Users/devenspear/CascadeProjects/Paratox1.0/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import _objectWithoutProperties from\"/Users/devenspear/CascadeProjects/Paratox1.0/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";const _excluded=[\"userId\"];// Utility for making authenticated requests\nasync function request(path,options){const{userId}=options,fetchOptions=_objectWithoutProperties(options,_excluded);const res=await fetch(\"\".concat(path,\"?userId=\").concat(encodeURIComponent(userId)),_objectSpread(_objectSpread({},fetchOptions),{},{headers:_objectSpread({'Content-Type':'application/json'},fetchOptions.headers||{})}));if(!res.ok){const body=await res.json().catch(()=>({}));throw new Error(body.error||\"Request failed with status \".concat(res.status));}return res.json();}export async function fetchProgress(userId){const data=await request('/api/progress',{method:'GET',userId});return data.progress;}export async function saveProgress(userId,progress){await request('/api/progress',{method:'POST',body:JSON.stringify({userId,progress}),userId});}","map":{"version":3,"names":["request","path","options","userId","fetchOptions","_objectWithoutProperties","_excluded","res","fetch","concat","encodeURIComponent","_objectSpread","headers","ok","body","json","catch","Error","error","status","fetchProgress","data","method","progress","saveProgress","JSON","stringify"],"sources":["/Users/devenspear/CascadeProjects/Paratox1.0/src/lib/api.ts"],"sourcesContent":["import { UserProgress } from '../types';\n\n// Utility for making authenticated requests\nasync function request(path: string, options: RequestInit & { userId: string }): Promise<any> {\n  const { userId, ...fetchOptions } = options;\n  const res = await fetch(`${path}?userId=${encodeURIComponent(userId)}`, {\n    ...fetchOptions,\n    headers: {\n      'Content-Type': 'application/json',\n      ...(fetchOptions.headers || {})\n    }\n  });\n\n  if (!res.ok) {\n    const body = await res.json().catch(() => ({}));\n    throw new Error(body.error || `Request failed with status ${res.status}`);\n  }\n\n  return res.json();\n}\n\nexport async function fetchProgress(userId: string): Promise<UserProgress | null> {\n  const data = await request('/api/progress', { method: 'GET', userId });\n  return data.progress as UserProgress;\n}\n\nexport async function saveProgress(userId: string, progress: UserProgress) {\n  await request('/api/progress', {\n    method: 'POST',\n    body: JSON.stringify({ userId, progress }),\n    userId\n  });\n} "],"mappings":"kTAEA;AACA,cAAe,CAAAA,OAAOA,CAACC,IAAY,CAAEC,OAAyC,CAAgB,CAC5F,KAAM,CAAEC,MAAwB,CAAC,CAAGD,OAAO,CAAxBE,YAAY,CAAAC,wBAAA,CAAKH,OAAO,CAAAI,SAAA,EAC3C,KAAM,CAAAC,GAAG,CAAG,KAAM,CAAAC,KAAK,IAAAC,MAAA,CAAIR,IAAI,aAAAQ,MAAA,CAAWC,kBAAkB,CAACP,MAAM,CAAC,EAAAQ,aAAA,CAAAA,aAAA,IAC/DP,YAAY,MACfQ,OAAO,CAAAD,aAAA,EACL,cAAc,CAAE,kBAAkB,EAC9BP,YAAY,CAACQ,OAAO,EAAI,CAAC,CAAC,CAC/B,EACF,CAAC,CAEF,GAAI,CAACL,GAAG,CAACM,EAAE,CAAE,CACX,KAAM,CAAAC,IAAI,CAAG,KAAM,CAAAP,GAAG,CAACQ,IAAI,CAAC,CAAC,CAACC,KAAK,CAAC,KAAO,CAAC,CAAC,CAAC,CAAC,CAC/C,KAAM,IAAI,CAAAC,KAAK,CAACH,IAAI,CAACI,KAAK,gCAAAT,MAAA,CAAkCF,GAAG,CAACY,MAAM,CAAE,CAAC,CAC3E,CAEA,MAAO,CAAAZ,GAAG,CAACQ,IAAI,CAAC,CAAC,CACnB,CAEA,MAAO,eAAe,CAAAK,aAAaA,CAACjB,MAAc,CAAgC,CAChF,KAAM,CAAAkB,IAAI,CAAG,KAAM,CAAArB,OAAO,CAAC,eAAe,CAAE,CAAEsB,MAAM,CAAE,KAAK,CAAEnB,MAAO,CAAC,CAAC,CACtE,MAAO,CAAAkB,IAAI,CAACE,QAAQ,CACtB,CAEA,MAAO,eAAe,CAAAC,YAAYA,CAACrB,MAAc,CAAEoB,QAAsB,CAAE,CACzE,KAAM,CAAAvB,OAAO,CAAC,eAAe,CAAE,CAC7BsB,MAAM,CAAE,MAAM,CACdR,IAAI,CAAEW,IAAI,CAACC,SAAS,CAAC,CAAEvB,MAAM,CAAEoB,QAAS,CAAC,CAAC,CAC1CpB,MACF,CAAC,CAAC,CACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}