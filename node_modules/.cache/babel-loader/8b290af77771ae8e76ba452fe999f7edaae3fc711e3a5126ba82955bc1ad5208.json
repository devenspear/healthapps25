{"ast":null,"code":"const generateTasks = day => {\n  const baseTasks = [{\n    id: `${day}-morning`,\n    time: \"Morning\",\n    description: \"1–20 drops Black Walnut (empty stomach)\",\n    completed: false\n  }, {\n    id: `${day}-midday`,\n    time: \"Midday\",\n    description: \"500–1000 mg Wormwood (pre‑lunch)\",\n    completed: false\n  }, {\n    id: `${day}-evening`,\n    time: \"Evening\",\n    description: \"500 mg Clove (after dinner)\",\n    completed: false\n  }];\n\n  // Add additional supplements based on phase\n  if (day >= 8) {\n    baseTasks.push({\n      id: `${day}-bedtime`,\n      time: \"Bedtime\",\n      description: \"1 tbsp Diatomaceous Earth OR Bentonite Clay\",\n      completed: false\n    });\n  }\n  if (day >= 1) {\n    baseTasks.push({\n      id: `${day}-fasted`,\n      time: \"AM (fasted)\",\n      description: \"120,000 SU Serrapeptase\",\n      completed: false\n    });\n    baseTasks.push({\n      id: `${day}-dinner`,\n      time: \"Dinner\",\n      description: \"25 mg Zinc\",\n      completed: false\n    });\n    baseTasks.push({\n      id: `${day}-daily`,\n      time: \"Daily\",\n      description: \"1g Vitamin C (twice daily)\",\n      completed: false\n    });\n  }\n  if (day >= 22) {\n    baseTasks.push({\n      id: `${day}-rebuild-am`,\n      time: \"AM\",\n      description: \"50B CFU Probiotic\",\n      completed: false\n    });\n    baseTasks.push({\n      id: `${day}-rebuild-pm`,\n      time: \"PM\",\n      description: \"5g L-Glutamine\",\n      completed: false\n    });\n  }\n  return baseTasks;\n};\nexport const cleanseCalendar = Array.from({\n  length: 28\n}, (_, index) => {\n  const day = index + 1;\n  const week = Math.ceil(day / 7);\n  let phase = \"\";\n  if (day <= 7) phase = \"Priming\";else if (day <= 14) phase = \"Kill - Phase 1\";else if (day <= 21) phase = \"Kill - Phase 2\";else phase = \"Rebuild\";\n  return {\n    day,\n    week,\n    title: `Day ${day} — Week ${week}: ${phase}`,\n    phase,\n    tasks: generateTasks(day),\n    completed: false\n  };\n});","map":{"version":3,"names":["generateTasks","day","baseTasks","id","time","description","completed","push","cleanseCalendar","Array","from","length","_","index","week","Math","ceil","phase","title","tasks"],"sources":["/Users/devenspear/CascadeProjects/Paratox1.0/src/data/cleanseCalendar.ts"],"sourcesContent":["import { DayEntry, Task } from '../types';\n\nconst generateTasks = (day: number): Task[] => {\n  const baseTasks: Task[] = [\n    {\n      id: `${day}-morning`,\n      time: \"Morning\",\n      description: \"1–20 drops Black Walnut (empty stomach)\",\n      completed: false\n    },\n    {\n      id: `${day}-midday`,\n      time: \"Midday\",\n      description: \"500–1000 mg Wormwood (pre‑lunch)\",\n      completed: false\n    },\n    {\n      id: `${day}-evening`,\n      time: \"Evening\",\n      description: \"500 mg Clove (after dinner)\",\n      completed: false\n    }\n  ];\n\n  // Add additional supplements based on phase\n  if (day >= 8) {\n    baseTasks.push({\n      id: `${day}-bedtime`,\n      time: \"Bedtime\",\n      description: \"1 tbsp Diatomaceous Earth OR Bentonite Clay\",\n      completed: false\n    });\n  }\n\n  if (day >= 1) {\n    baseTasks.push({\n      id: `${day}-fasted`,\n      time: \"AM (fasted)\",\n      description: \"120,000 SU Serrapeptase\",\n      completed: false\n    });\n    \n    baseTasks.push({\n      id: `${day}-dinner`,\n      time: \"Dinner\",\n      description: \"25 mg Zinc\",\n      completed: false\n    });\n    \n    baseTasks.push({\n      id: `${day}-daily`,\n      time: \"Daily\",\n      description: \"1g Vitamin C (twice daily)\",\n      completed: false\n    });\n  }\n\n  if (day >= 22) {\n    baseTasks.push({\n      id: `${day}-rebuild-am`,\n      time: \"AM\",\n      description: \"50B CFU Probiotic\",\n      completed: false\n    });\n    \n    baseTasks.push({\n      id: `${day}-rebuild-pm`,\n      time: \"PM\",\n      description: \"5g L-Glutamine\",\n      completed: false\n    });\n  }\n\n  return baseTasks;\n};\n\nexport const cleanseCalendar: DayEntry[] = Array.from({ length: 28 }, (_, index) => {\n  const day = index + 1;\n  const week = Math.ceil(day / 7);\n  \n  let phase = \"\";\n  if (day <= 7) phase = \"Priming\";\n  else if (day <= 14) phase = \"Kill - Phase 1\";\n  else if (day <= 21) phase = \"Kill - Phase 2\";\n  else phase = \"Rebuild\";\n\n  return {\n    day,\n    week,\n    title: `Day ${day} — Week ${week}: ${phase}`,\n    phase,\n    tasks: generateTasks(day),\n    completed: false\n  };\n}); "],"mappings":"AAEA,MAAMA,aAAa,GAAIC,GAAW,IAAa;EAC7C,MAAMC,SAAiB,GAAG,CACxB;IACEC,EAAE,EAAE,GAAGF,GAAG,UAAU;IACpBG,IAAI,EAAE,SAAS;IACfC,WAAW,EAAE,yCAAyC;IACtDC,SAAS,EAAE;EACb,CAAC,EACD;IACEH,EAAE,EAAE,GAAGF,GAAG,SAAS;IACnBG,IAAI,EAAE,QAAQ;IACdC,WAAW,EAAE,kCAAkC;IAC/CC,SAAS,EAAE;EACb,CAAC,EACD;IACEH,EAAE,EAAE,GAAGF,GAAG,UAAU;IACpBG,IAAI,EAAE,SAAS;IACfC,WAAW,EAAE,6BAA6B;IAC1CC,SAAS,EAAE;EACb,CAAC,CACF;;EAED;EACA,IAAIL,GAAG,IAAI,CAAC,EAAE;IACZC,SAAS,CAACK,IAAI,CAAC;MACbJ,EAAE,EAAE,GAAGF,GAAG,UAAU;MACpBG,IAAI,EAAE,SAAS;MACfC,WAAW,EAAE,6CAA6C;MAC1DC,SAAS,EAAE;IACb,CAAC,CAAC;EACJ;EAEA,IAAIL,GAAG,IAAI,CAAC,EAAE;IACZC,SAAS,CAACK,IAAI,CAAC;MACbJ,EAAE,EAAE,GAAGF,GAAG,SAAS;MACnBG,IAAI,EAAE,aAAa;MACnBC,WAAW,EAAE,yBAAyB;MACtCC,SAAS,EAAE;IACb,CAAC,CAAC;IAEFJ,SAAS,CAACK,IAAI,CAAC;MACbJ,EAAE,EAAE,GAAGF,GAAG,SAAS;MACnBG,IAAI,EAAE,QAAQ;MACdC,WAAW,EAAE,YAAY;MACzBC,SAAS,EAAE;IACb,CAAC,CAAC;IAEFJ,SAAS,CAACK,IAAI,CAAC;MACbJ,EAAE,EAAE,GAAGF,GAAG,QAAQ;MAClBG,IAAI,EAAE,OAAO;MACbC,WAAW,EAAE,4BAA4B;MACzCC,SAAS,EAAE;IACb,CAAC,CAAC;EACJ;EAEA,IAAIL,GAAG,IAAI,EAAE,EAAE;IACbC,SAAS,CAACK,IAAI,CAAC;MACbJ,EAAE,EAAE,GAAGF,GAAG,aAAa;MACvBG,IAAI,EAAE,IAAI;MACVC,WAAW,EAAE,mBAAmB;MAChCC,SAAS,EAAE;IACb,CAAC,CAAC;IAEFJ,SAAS,CAACK,IAAI,CAAC;MACbJ,EAAE,EAAE,GAAGF,GAAG,aAAa;MACvBG,IAAI,EAAE,IAAI;MACVC,WAAW,EAAE,gBAAgB;MAC7BC,SAAS,EAAE;IACb,CAAC,CAAC;EACJ;EAEA,OAAOJ,SAAS;AAClB,CAAC;AAED,OAAO,MAAMM,eAA2B,GAAGC,KAAK,CAACC,IAAI,CAAC;EAAEC,MAAM,EAAE;AAAG,CAAC,EAAE,CAACC,CAAC,EAAEC,KAAK,KAAK;EAClF,MAAMZ,GAAG,GAAGY,KAAK,GAAG,CAAC;EACrB,MAAMC,IAAI,GAAGC,IAAI,CAACC,IAAI,CAACf,GAAG,GAAG,CAAC,CAAC;EAE/B,IAAIgB,KAAK,GAAG,EAAE;EACd,IAAIhB,GAAG,IAAI,CAAC,EAAEgB,KAAK,GAAG,SAAS,CAAC,KAC3B,IAAIhB,GAAG,IAAI,EAAE,EAAEgB,KAAK,GAAG,gBAAgB,CAAC,KACxC,IAAIhB,GAAG,IAAI,EAAE,EAAEgB,KAAK,GAAG,gBAAgB,CAAC,KACxCA,KAAK,GAAG,SAAS;EAEtB,OAAO;IACLhB,GAAG;IACHa,IAAI;IACJI,KAAK,EAAE,OAAOjB,GAAG,WAAWa,IAAI,KAAKG,KAAK,EAAE;IAC5CA,KAAK;IACLE,KAAK,EAAEnB,aAAa,CAACC,GAAG,CAAC;IACzBK,SAAS,EAAE;EACb,CAAC;AACH,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}